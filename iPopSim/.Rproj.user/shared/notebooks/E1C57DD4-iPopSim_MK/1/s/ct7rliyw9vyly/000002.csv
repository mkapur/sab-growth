"0","options(warn = -1)"
"0","p = proc.time() ## set timer"
"0","for(l in 1:nrow(fLevs)){"
"0","  out_file <- paste0(getwd(),""/outputs/"",paste(fLevs[l,1],fLevs[l,2], sep = ""_""))"
"0","  ## Remove pre-existing MATRIX files"
"0","  unlink(out_file, recursive=TRUE) ## delete pre-existing file"
"0","  dir.create(out_file) ## make master FLevel File"
"0","  "
"0","  for(boot_number in 1:nboot) { ## full nsims, line 20"
"0","    cat(paste0(paste(fLevs[l,1],fLevs[l,2]),' SIM ',boot_number, ""\n""))"
"0","    ## Designate WRITE location"
"0","    path_name <- paste0(out_file,""/boot_"",boot_number) "
"0","    dir.create(path_name, showWarnings = F) ## make individual sim file"
"0","    for(g in 2:(a2+1)){"
"0","      init_comp[g]=init_comp[g-1]*exp(-Inst_M) ## instantaneous survivorship at age"
"0","    }"
"0","    init_comp[a2+1] = init_comp[a2+1]/(1-exp(-Inst_M)) #plus group"
"0","    "
"0","    # Length-at-age "
"0","    init_length = NULL"
"0","    error = exp(rnorm(1,0,growth_lognormal_SD)-growth_lognormal_SD^2/2)"
"0","    init_length[1] = L1*error"
"0","    "
"0","    for(g in 1:(a2)){"
"0","      init_length[g+1] = (init_length[g]+growth_incre(init_length[g]))*error"
"0","    }"
"0","    # init_length=init_length[1:a2]"
"0","    "
"0","    # Weight-at-age"
"0","    init_weight = lw(init_length)"
"0","    # Maturity-at-age"
"0","    init_mat = prob_mature(init_length)"
"0","    # Eggs-body mass relationship"
"0","    init_eggs = 1*init_weight^0"
"0","    # Calculate SSB per recruit"
"0","    SSB_per_recruit = sum(0.5*init_comp*init_weight*init_mat*init_eggs)"
"0","    # initail SSB"
"0","    SSB0 = SSB_per_recruit*R0_super"
"0","    "
"0","    # Lognormal recruitment deviation module"
"0","    recruit_dev = rnorm(simu_year,0,sigma_R)"
"0","    recruit_dev_adj = (recruit_dev-0.5*sigma_R^2)"
"0","    RECRUITs = round(R0_super*exp(recruit_dev_adj)) ## generate estimated recruit vector of length simu_year"
"0","    "
"0","    SSBy = NULL"
"0","    SSBy[1] = SSB0"
"0","    "
"0","    uni_ind = 0"
"0","    "
"0","    ## get F vector at two different levels with time break"
"0","    Inst_F_vector <- c(select.effort(location = 'inputs/',  level = fLevs[l,1], nsim = 1000)[1:50],select.effort(location = 'inputs/',  level = fLevs[l,1], nsim = 1000)[51:101])"
"0","    # Inst_F_vector = select.effort(location = 'inputs/',  level = 'LOW', nsim = 1000) ## subset a random time series from the effort simulator for a given fishing level; the 1000 just indicates how many sims it can choose from"
"0","    for(ry in 1:simu_year){ ## iterate sim years"
"0","      if(RECRUITs[ry] < 1){ ## fail if less than one recruit"
"0","        RECRUITs[ry]=1 ## coerce to 1"
"0","        print(paste0(""!!! Recruitment Fail !!! year "",ry))"
"0","      }"
"0","      "
"0","      # if(ry %% 10 == 0){ ## report every 10 yrs"
"0","      #   print(paste0(""F LEVEL: "", level, "" +"",ry,"" Cohort Years""))"
"0","      # }"
"0","      "
"0","      # current_year_by individual"
"0","      RECRUITs_year =  rep(1*(ry-1),RECRUITs[ry]) ## vector that lists current year once for each recruit "
"0","      "
"0","      # a loop for running each by ind  "
"0","      for(i in 1:length(RECRUITs_year)){   ## iterate through each new recruit"
"0","        "
"0","        uni_ind <- uni_ind + 1"
"0","        accumu_yr_1 <- RECRUITs_year[i]+start_yr   "
"0","        "
"0","        ## GROWTH MODULE: "
"0","        num_of_chance <- length(Inst_F_vector[ry:length(Inst_F_vector)])"
"0","        # num_of_chance =  length(ry:length(Inst_F_vector)) ## find length from current recruitment year to end of fishing mortality vector (includes burn in); number of years left"
"0","        "
"0","        fish_sizes = NULL"
"0","        ind_growth_error = exp(rnorm(1,0,growth_lognormal_SD)-growth_lognormal_SD^2/2) ## set individual growth error"
"0","        fish_sizes[1]=L1*ind_growth_error ## establish first size"
"0","        "
"0","        for(g in 1:(num_of_chance-1)){          # next mid year (interval 1 year)"
"0","          fish_sizes[g+1] <- (fish_sizes[g]+growth_incre(fish_sizes[g]))*ind_growth_error"
"0","        }"
"0","                "
"0","    "
"0","        # Generate a vector of inst_total mortality for this individual;"
"0","        ## inst_M is constant, select F vector from given year to end of F vector and multiply by selectivity across fish's lifetime"
"0","        inst_Z_vector = Inst_M + Inst_F_vector[ry:length(Inst_F_vector)]*selectivity(fish_sizes)  "
"0","         # subset the fish size from the full size-at-age vector (only those that survive grow)"
"0","        "
"0","         # fish_sizes = fish_sizes[1:a2] ## cut fish_sizes down to max age - this causes problems with multiplication if before inst_z_vector"
"0","        inst_Z_vector = inst_Z_vector[1:a2]"
"0","        # if(length(inst_Z_vector) >a2){print('length fish size > a2 line 111')}"
"0","        "
"0","        # random number r1 - bernoulli trial"
"0","        r1 = runif(length(inst_Z_vector), 0, 1)"
"0","        Zdeath = which.max(r1 <= (1 - exp(-inst_Z_vector))) ## index where r1 is first less than probability of survival (incorporates change)"
"0","        fish_sizes = fish_sizes[1:Zdeath] ## trim fish_sizes to time at death"
"0","        if(length(fish_sizes) >a2){print('length fish size > a2 line 122')}"
"0","        "
"0","        ## SIZE-AT-TIME BOOKKEEPING "
"0","        true_age = 1:Zdeath-1 ## actual lifespan before zdeath"
"0","        AgeE = rnorm(length(true_age),mean_age_true_age[true_age+1],mean_SD_age_true_age[true_age+1]) "
"0","        AgeE[AgeE<0]=0"
"0","        "
"0","        SAA <- data.frame("
"0","          cohort = rep(ry, Zdeath),"
"0","          uni_ind = rep(uni_ind, Zdeath), ## changed this to rep length Zdeath so it'd match"
"0","          ind = rep(i, Zdeath),"
"0","          fish_size = fish_sizes[1:Zdeath],"
"0","          M = rep(Inst_M, Zdeath),  ## changed this to rep length Zdeath so it'd match"
"0","          Sel = c(selectivity(fish_sizes)),"
"0","          FSIM = paste(fLevs[l,1],fLevs[l,2])"
"0","        )"
"0","        "
"0","        ## MORTALITY MODULE:"
"0","        # seperate inst_total mortality into F and M"
"0","        M_dead_por = (1 - exp(-Inst_M)) / (1 - exp(-inst_Z_vector[Zdeath])) ## nat survivorship over overall survivorship. Will be 1 for years with only nat mort in effect."
"0","        r2 = runif(1, 0, 1) ## bernoulli trial"
"0","        true_age = Zdeath - 1"
"0","        AgeE = rnorm(1, mean_age_true_age[true_age + 1], mean_SD_age_true_age[true_age +"
"0","        1])"
"0","        AgeE[AgeE < 0] = 0"
"0","        "
"0","        ## write dinfo "
"0","        dinfo = data.frame("
"0","          cohort = c(ry),"
"0","          dtype = NA, ## fill in next based on log-odds (r2)"
"0","          FMORT = c(Inst_F_vector[ry + Zdeath - 1]),"
"0","          M = c(Inst_M),"
"0","          Sel = c(selectivity(fish_sizes[Zdeath])),"
"0","          FSIM = paste(fLevs[l,1],fLevs[l,2])"
"0","        )"
"0","        "
"0","        dinfo$dtype = ifelse(r2 <= M_dead_por, ""M"", ""FISHED"")"
"0","        "
"0","        ## write data to file - one for each F level"
"0","        "
"0","                write.table(SAA, paste(path_name,""/IBM_SAA_MATRIX.txt"",sep=""""),append = TRUE,row.names = FALSE,col.names = FALSE,sep="","")"
"0","        write.table(dinfo,paste(path_name,""/IBM_DEAD_MATRIX.txt"",sep=""""),append = TRUE,row.names = FALSE,col.names = FALSE,sep="","")"
"0","        "
"0","      } ## end of individual recruit"
"0","      "
"0","      ## STOCK-RECRUITMENT MODULE"
"0","          tempSAA = read.table(paste0(path_name, ""/IBM_SAA_MATRIX.txt""),header = T, sep = ',') ## read current size-at-age-table"
"0","          tempN = subset(tempSAA, Year == (ry + start_yr - 1)) ## extract PREVIOUS year"
"0","          tempW = lw(tempN$fish_size) ## calc weights"
"0","          tempMat = prob_mature(tempN$fish_size) ## calc prob of maturity at size"
"0","          tempE = 1 * tempW ^ 0 ## ! unsure"
"0","          SSBy[ry] = sum(tempW * tempMat * tempE) / 2 ## SSB for this year (half step) is the sum of all biomasses & prob maturity"
"0","          RECRUITs[ry + 1] = round(BH_SR(SSBy[ry]) * exp(recruit_dev_adj[ry])) ## next year's recruits are the bev-holt or LFSR of the SSB with error"
"0","        } ## end of recruitment generation for that year"
"0","    } ## end of simu_year (ry)"
"0","## Bind all & Save"
"0","# p = proc.time()"
"0","    "
"0","IBM_SAA_MATRIX = read.table(paste0(path_name,""/IBM_SAA_MATRIX.txt""),sep="","",header=T)"
"0","IBM_DEAD_MATRIX = read.table(paste0(path_name,""/IBM_DEAD_MATRIX.txt""),sep="","",header=T)"
"0","# IBM_SAA_MATRIX = rbind(read.table(paste0(path_name,""/IBM_SAA_MATRIX_LOW.txt""),sep="","",header=T),"
"0","#                         read.table(paste0(path_name,""/IBM_DEAD_MATRIX_MED.txt""),sep="","",header=T),"
"0","#                         read.table(paste0(path_name,""/IBM_DEAD_MATRIX_HIGH.txt""),sep="","",header=T))"
"0","# write.table(IBM_SAA_MATRIX,paste0(path_name,""/IBM_SAA_MATRIX.txt""),"
"0","#             row.names = FALSE,col.names = T,sep="","")"
"0","# write.table(IBM_DEAD_MATRIX,paste0(path_name,""/IBM_DEAD_MATRIX.txt""),"
"0","#             row.names = FALSE,col.names = T,sep="","")"
"0","## Generate Exploitable population"
"0","IBM_EXP_MATRIX = NULL"
"0","for(i in start_yr:(start_yr+simu_year-1)){"
"0","  # print(paste(""Year = "", i))"
"0","  temp_Year = subset(IBM_SAA_MATRIX, Year==i)"
"0","  r3 = runif(length(temp_Year[,1]),0,1)"
"0","  index = which(r3 <= selectivity(temp_Year$fish_size))"
"0","} # end of year"
"0","## Generate Catch Matrix"
"0","CATCH_MATRIX = subset(IBM_DEAD_MATRIX, dtype==""FISHED"") ## all records of fishing death"
"0","write.table(CATCH_MATRIX,paste0(path_name, ""/CATCH_MATRIX.csv"",sep=""""),row.names = FALSE,col.names = TRUE,sep="","")"
"0","IBM_EXP_MATRIX = read.table(paste0(path_name,""/IBM_EXP_MATRIX.txt""),sep="","",header=T) "
"0","CATCH_MATRIX = read.table(paste0(path_name,""/CATCH_MATRIX.csv""),sep="","",header=T) "
"0","## SS3 SIZE COMPOSITION ----"
"0","SS3_Obs_Size_COM_MinBin = 5"
"0","SS3_Obs_Size_COM_MaxBin = 1005"
"0","Obs_Size_COM_bin_interval = 10"
"0","Effect_N = 100"
"0","OBS_SIZE_COM = NULL"
"0","por_TRUE_SIZE_COM = NULL"
"0","por_OBS_SIZE_COM = NULL"
"0","for(y in (start_yr+M_only_yr):(start_yr+simu_year-1)){"
"0","  temp_Year = subset(CATCH_MATRIX, Year==y)"
"0","  "
"0","  if(length(temp_Year[,1])>=1){"
"0","    # lower bin"
"0","    hist_data = hist(temp_Year$fish_size,right=F,breaks=OBS_size_bin,plot=FALSE)  "
"0","    temp_true_catch_com = hist_data$counts/sum(hist_data$counts)"
"0","    por_TRUE_SIZE_COM = rbind(por_TRUE_SIZE_COM,temp_true_catch_com)"
"0","    "
"0","    catch_com_new = NULL"
"0","    temp_por_OBS_SIZE_COM = NULL"
"0","    for(i in 1:length(temp_true_catch_com)){"
"0","      n_count = 0"
"0","        }"
"0","      }"
"0","      catch_com_new[i]=n_count"
"0","      temp_por_OBS_SIZE_COM[i] = n_count/Effect_N"
"0","    }"
"0","    por_OBS_SIZE_COM = rbind(por_OBS_SIZE_COM,temp_por_OBS_SIZE_COM)"
"0","    #Yr"",""Seas"",""Flt"",""Gender"",""Part"",""Nsamp"""
"0","    OBS_SIZE_COM = rbind(OBS_SIZE_COM,c(y,   1,      1,    0,      0,      Effect_N,catch_com_new))"
"0","  } # end of if "
"0","}"
"0","colnames(OBS_SIZE_COM) <-  c(""#Yr"",""Seas"",""Flt"",""Gender"",""Part"",""Nsamp"",lower_OBS_size_bin)"
"0","colnames(por_OBS_SIZE_COM) <-  c(lower_OBS_size_bin)"
"0","write.table(""#_N_LengthBins"",paste0(path_name, ""/SS3_OBS_Size_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T) "
"0","N_size_observation = length(OBS_SIZE_COM[,1])"
"0","write.table(t(N_size_observation),paste0(path_name, ""/SS3_OBS_Size_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T) "
"0","# data-vector"
"0","write.table(t(colnames(OBS_SIZE_COM)),paste0(path_name, ""/SS3_OBS_Size_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T) "
"0","write.table(OBS_SIZE_COM,paste0(path_name, ""/SS3_OBS_Size_COM.csv""),row.names=FALSE,col.names=FALSE,sep="","",append = T)"
"0","# print(paste0('wrote SS3 OBS size comp, sim ',sim_number,"" FLEVEL "",level))"
"0","## SS3 AGE COMPOSITION ----"
"0","# file.remove(paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""))"
"0","max_IBM_age =  max(max(CATCH_MATRIX$AgeE),max(CATCH_MATRIX$Age),max(IBM_SAA_MATRIX$Age))"
"0","if(max_IBM_age>a2){"
"0","lower_age_bin = full_age_breaks[-length(full_age_breaks)]"
"0","OBS_full_AgeE_COM = NULL   "
"0","por_full_Agetrue_COM = NULL"
"0","por_full_AgeE_COM = NULL"
"0","por_OBS_AgeE_COM = NULL"
"0","for(y in unique(CATCH_MATRIX$Year)){"
"0","  temp_Year = subset(CATCH_MATRIX, Year==y) ## only works where a fish died in that year"
"0","  "
"0","  for(k in 1:length(OBS_size_bin-1)){"
"0","      "
"0","      hist_data_Agetrue = hist(temp_conditional_size$Age,right=F,breaks=full_age_breaks,plot=FALSE) "
"0","      hist_data_AgeE = hist(temp_conditional_size$AgeE,right=F,breaks=full_age_breaks,plot=FALSE)"
"0","      "
"0","      temp_data_Agetrue = hist_data_Agetrue$counts/sum(hist_data_Agetrue$counts) "
"0","      temp_data_AgeE = hist_data_AgeE$counts/sum(hist_data_AgeE$counts)"
"0","      "
"0","      por_full_Agetrue_COM = rbind(por_full_Agetrue_COM,temp_data_Agetrue)"
"0","      por_full_AgeE_COM = rbind(por_full_AgeE_COM,temp_data_AgeE)"
"0","      "
"0","      obs_Age_COM = NULL"
"0","      temp_por_obs_Age_COM = NULL"
"0","      for(i in 1:length(temp_data_AgeE)){"
"0","          if(r5<=temp_data_AgeE[i]){"
"0","            n_count=n_count+1"
"0","          }"
"0","        }"
"0","        obs_Age_COM[i]=n_count"
"0","        temp_por_obs_Age_COM[i]=n_count/Effect_N_Age_COM"
"0","      }"
"0","      por_OBS_AgeE_COM = rbind(por_OBS_AgeE_COM,temp_por_obs_Age_COM)"
"0","      "
"0","      #Yr"",""Seas"",""Flt"",""Gender"",""Part"", ""Ageerr"", ""Lbin_lo"", ""Lbin_hi"", ""Nsamp"",           ""obs_Age_COM"""
"0","      OBS_full_AgeE_COM = rbind(OBS_full_AgeE_COM,c(y,   1,      1,    0,      0,      1,         OBS_size_bin[k],         OBS_size_bin[k],        Effect_N_Age_COM, obs_Age_COM))"
"0","      "
"0","} # end of year"
"0","colnames(por_full_Agetrue_COM) <-  c(hist_data_AgeE$breaks[-length(hist_data_AgeE$breaks)]) "
"0","colnames(por_full_AgeE_COM) <-  c(hist_data_AgeE$breaks[-length(hist_data_AgeE$breaks)])   "
"0","colnames(por_OBS_AgeE_COM) <-  c(hist_data_AgeE$breaks[-length(hist_data_AgeE$breaks)])   "
"0","colnames(OBS_full_AgeE_COM) <-  c(""#Yr"",""Seas"",""Flt"",""Gender"",""Part"",""Ageerr"",""Lbin_lo"",""Lbin_hi"",""Nsamp"",hist_data_AgeE$breaks[-length(hist_data_AgeE$breaks)])"
"0","OBS_full_AgeE_COM = as.data.frame(OBS_full_AgeE_COM)"
"0","por_full_Agetrue_COM = as.data.frame(por_full_Agetrue_COM)"
"0","por_full_AgeE_COM = as.data.frame(por_full_AgeE_COM)"
"0","# Number of OBS_age_bin (age' bin)"
"0","N_obs_age_bin = length(OBS_age_bin)"
"0","write.table(""#_N_age_bins"",paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T) "
"0","write.table(t(N_obs_age_bin),paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T) "
"0","write.table(t(OBS_age_bin),paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T) "
"0","# Ageing error"
"0","write.table(""#_N_ageerror_definitions"",paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T)  "
"0","write.table(""1"",paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T)  "
"0","# vector of mean age' for each true age  "
"0","write.table(t(mean_age_true_age[1:(a2+1)]),paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T)  "
"0","# vector of SD of age' for each true age"
"0","write.table(t(mean_SD_age_true_age[1:(a2+1)]),paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T) "
"0","N_age_observation = length(OBS_AgeE_COM[,1])"
"0","write.table(""#_N_Agecomp_obs"",paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T) "
"0","write.table(t(N_age_observation),paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T) "
"0","Age_COM_length_bin = 1"
"0","write.table(""#_Lbin_method: 1=poplenbins; 2=datalenbins; 3=lengths"",paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T)  "
"0","write.table(t(Age_COM_length_bin),paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T)  "
"0","Combine_M_into_F = 1"
"0","write.table(""#_combine males into females at or below this bin number"",paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T)  "
"0","write.table(t(Combine_M_into_F),paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T)  "
"0","# data-vector"
"0","write.table(t(colnames(OBS_AgeE_COM)),paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T) "
"0","write.table(OBS_AgeE_COM,paste0(path_name, ""/SS3_OBS_AgeE_COM.csv"",sep=""""),row.names=FALSE)"
"0","# print(paste0('wrote SS3 OBS age comp, sim ',sim_number, "" FLEVEL "",level))"
"0","## SS3 NUMBER/FISHERY BASED CPUE ----"
"0","Exp_POP = NULL"
"0","for(i in start_yr:(start_yr+simu_year-1)){"
"0","  temp_Year = subset(IBM_EXP_MATRIX,IBM_EXP_MATRIX$Year==i)"
"0","  EXP_temp = data.frame(Year=c(i),Exp_number=c(length(temp_Year$fish_size)),Exp_biomass=c(sum(lw(temp_Year$fish_size))))"
"0","  Exp_POP = rbind(Exp_POP,EXP_temp)"
"0","}"
"0","CPUE_error = rnorm(length(Exp_POP[,1]),0,sigma_CPUE)                 "
"0","OBS_CPUE = data.frame(Year=c(Exp_POP[,1]),season=c(1),fleet=c(2),CPUE=c(Exp_POP[,2]*fishery_q*exp(CPUE_error-0.5*sigma_CPUE^2)),sd=c(sigma_CPUE))"
"0","write.table(OBS_CPUE,paste0(path_name, ""/SS3_Fishery_CPUE.csv"",sep=""""),row.names = FALSE,col.names = TRUE,sep="","") "
"0","## SS3 CATCH DATA----"
"0","F_MATRIX = subset(IBM_DEAD_MATRIX,IBM_DEAD_MATRIX$dtype==""F"")"
"0","M_MATRIX = subset(IBM_DEAD_MATRIX,IBM_DEAD_MATRIX$dtype==""M"")"
"0","CATCH_wt = NULL"
"0","CATCH = NULL"
"0","DEATH_wt = NULL "
"0","for(i in start_yr:(start_yr+simu_year-1)){"
"0","  temp_Year = subset(F_MATRIX,F_MATRIX$Year==i)"
"0","  temp_Year_M = subset(M_MATRIX,M_MATRIX$Year==i)"
"0","  CATCH = rbind(CATCH,length(temp_Year[,1]))"
"0","  CATCH_wt = rbind(CATCH_wt,sum(lw(temp_Year$fish_size)))"
"0","  DEATH_wt = rbind(DEATH_wt,sum(lw(temp_Year_M$fish_size)))"
"0","}"
"0","catch_out = data.frame(CATCH_num=c(CATCH),CATCH_Kg=c(CATCH_wt),CATCH_ton=c(CATCH_wt)/1000,Year=c(start_yr:(start_yr+simu_year-1)),season=c(1))"
"0","write.table(catch_out,paste0(path_name, ""/SS3_Catch.csv"",sep=""""),row.names = FALSE,col.names = TRUE,sep="","") "
"0","# print(paste0('wrote SS3 catch data, sim ',sim_number,"" FLEVEL "",level))"
"0","## SS3 MEAN LENGTH AT AGE ----"
"0","# file.remove(paste0(path_name, ""/SS3_OBS_Mean_Size_At_AgeE.csv"",sep=""""))"
"0","OBS_Mean_Length_At_Age_RESULT = NULL"
"0","for(y in (start_yr+M_only_yr):(start_yr+simu_year-1)){"
"0","  "
"0","  temp_Year = subset(CATCH_MATRIX,CATCH_MATRIX$Year==y)"
"0","  "
"0","  temp_mean_size_at_age = NULL"
"0","  RESULT_fish_N = NULL"
"0","  for(age in 1:(length(full_age_breaks)-1)){"
"0","    temp_age = subset(temp_Year,temp_Year$AgeE >= full_age_breaks[age] & temp_Year$AgeE < full_age_breaks[age+1])"
"0","    if(length(temp_age[,1])>=Nsamp_Mean_length_at_age){"
"0","      index_all = c(1:length(temp_age[,1]))"
"0","      sample_index = sample(index_all,Nsamp_Mean_length_at_age,replace = FALSE)"
"0","      sample_temp_age = temp_age[sample_index,]"
"0","      mean_size_at_age = mean(sample_temp_age$fish_size)"
"0","      fish_N = Nsamp_Mean_length_at_age"
"0","      temp_mean_size_at_age=rbind(temp_mean_size_at_age,mean_size_at_age)"
"0","      RESULT_fish_N = rbind(RESULT_fish_N,fish_N)"
"0","    }"
"0","    else if(length(temp_age[,1])==0){"
"0","      mean_size_at_age = c(-999)"
"0","      fish_N = 0 "
"0","      temp_mean_size_at_age = rbind(temp_mean_size_at_age,mean_size_at_age) "
"0","      RESULT_fish_N = rbind(RESULT_fish_N,fish_N)"
"0","    }"
"0","    else{"
"0","      mean_size_at_age = mean(temp_age$fish_size)"
"0","      fish_N = length(temp_age[,1]) "
"0","      temp_mean_size_at_age = rbind(temp_mean_size_at_age,mean_size_at_age) "
"0","      RESULT_fish_N = rbind(RESULT_fish_N,fish_N) "
"0","  OBS_Mean_Length_At_Age_RESULT = rbind(OBS_Mean_Length_At_Age_RESULT,c(y,   1,      1,    0,      0,      1,        2,     temp_mean_size_at_age,            RESULT_fish_N))"
"0","  "
"0","} # year loop"
"0","colnames(OBS_Mean_Length_At_Age_RESULT) <- c(""#Yr"",""Seas"",""Flt"",""Gender"",""Part"",""Ageerr"",""Nsamp"",lower_age_bin, paste(""N_fish_a"",lower_age_bin,sep=""""))"
"0","OBS_Mean_Length_At_Age_RESULT = as.data.frame(OBS_Mean_Length_At_Age_RESULT)  "
"0","OBS_Mean_Length_At_Age_RESULT = subset(OBS_Mean_Length_At_Age_RESULT, select = c(""#Yr"",""Seas"",""Flt"",""Gender"",""Part"",""Ageerr"",""Nsamp"",OBS_age_bin, paste(""N_fish_a"",OBS_age_bin,sep="""")))"
"0","# Number of OBS_age_bin (age' bin)"
"0","N_obs_mean_size_at_age = length(OBS_Mean_Length_At_Age_RESULT[,1])"
"0","write.table(""#_N_MeanSize-at-Age_obs"",paste0(path_name, ""/SS3_OBS_Mean_Size_At_AgeE.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T) "
"0","write.table(t(N_obs_mean_size_at_age),paste0(path_name, ""/SS3_OBS_Mean_Size_At_AgeE.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T) "
"0","# data-vector"
"0","write.table(t(colnames(OBS_Mean_Length_At_Age_RESULT)),paste0(path_name, ""/SS3_OBS_Mean_Size_At_AgeE.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T) "
"0","write.table(OBS_Mean_Length_At_Age_RESULT,paste0(path_name, ""/SS3_OBS_Mean_Size_At_AgeE.csv"",sep=""""),row.names=FALSE,col.names=FALSE,sep="","",append = T) "
"0","# print(paste0('wrote SS3 mean size at age, sim ',sim_number,"" FLEVEL "",level))"
"0","  } ## end of number sims"
"0","  plotComps(out_file)"
"0","} ## end of fishing_level"
"1","LOW LOW SIM 1
"
"2","appending column names to file"
"2","appending column names to file"
"2","appending column names to file"
"1","LOW LOW SIM 2
"
"2","appending column names to file"
"2","appending column names to file"
"2","appending column names to file"
"1","LOW LOW SIM 3
"
"2","appending column names to file"
"2","appending column names to file"
"2","appending column names to file"
"1","MED LOW SIM 1
"
"1","MED LOW SIM 2
"
"1","MED LOW SIM 3
"
"1","HIGH LOW SIM 1
"
"1","HIGH LOW SIM 2
"
"1","HIGH LOW SIM 3
"
"1","LOW MED SIM 1
"
"1","LOW MED SIM 2
"
"1","LOW MED SIM 3
"
"1","MED MED SIM 1
"
"1","MED MED SIM 2
"
"1","MED MED SIM 3
"
"1","HIGH MED SIM 1
"
"1","HIGH MED SIM 2
"
"1","HIGH MED SIM 3
"
"1","LOW HIGH SIM 1
"
"1","LOW HIGH SIM 2
"
"1","LOW HIGH SIM 3
"
"1","MED HIGH SIM 1
"
"1","MED HIGH SIM 2
"
"1","MED HIGH SIM 3
"
"1","HIGH HIGH SIM 1
"
"1","HIGH HIGH SIM 2
"
"1","HIGH HIGH SIM 3
"
"0","print(paste(""Full simulation time "",((proc.time()-p)/60)[1],""min(s)""))"
"1","[1]"
"1"," ""Full simulation time  3.702 min(s)"""
"1","
"
