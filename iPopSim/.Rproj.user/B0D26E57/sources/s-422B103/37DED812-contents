## Sneaking up on MisSpec
## Master File

rm(list = ls()); set.seed(731)
require(ggplot2)
require(r4ss)
require(doParallel)
require(dplyr)
library(ThorsonUtilities); #devtools::install_github("james-thorson/utilities")
library(gtools)
library(kaputils); #install.packages( "c:/users/mkapur/documents/github/kaputils",  repos = NULL, type = "source", dependencies = T)
library(gridExtra)

## folder setup
RootFile = "C:/users/mkapur/dropbox/HAKEBOOT/"
setwd(RootFile)

## Load packages and R functions
mapply(source, list.files(paste0(RootFile,"tuna-misspec/"), pattern = ".R", full.names=TRUE))

# Configuration settings
verbose = FALSE
Species = "HAKE"

SpeciesOM <- paste0(RootFile,Species,"_OM/")
recruit_dev <- runOM(SpeciesOM, extract.fit.only = T) ## get out rec-devs from OM

## TO DO WITH PARAMETERS: the pName must match how it is listed in the CTL file. ----
# random.ms(RootFile, 500) ## make misspec_sample.csv
stringms <- sample_n(read.csv(paste0(RootFile,"misspec_sample.csv"), stringsAsFactors = T)[,1:9],50) ## a df of all poss misspec combos


## RUN SIMULATION ----
p <- proc.time()
  for (RepI in 1:nrow(stringms)) { ## iterate all strings
    cat(RepI, 'of ', nrow(stringms),"\n")
    Bootstrap_Sim_Fn(RepI, recruit_dev) # Generate & execute bootstrap replicate inside this repfile
    # parmgrid <- parmgrid[order(match(parmgrid$idx, t(stringms[RepI,]))),]  ## resort parmgrid for this instance
    idx <- data.frame(t(stringms[RepI,]))
    names(idx) <- "idx"
    for (RepE in 1:nrow(idx)) {
      ## create misspecified replicate in EACH EM and execute.
      Build_EM_Fn(
        RootFile,
        Species = Species,
        parmgrid = idx,
        RepI = RepI,
        RepE = RepE
      )
    } ## end RepE
  } ## end RepI

proc.time() - p

## COMPILE RESULTS ----
## full ss-compare plots
llabls <- list.dirs(RootFile, recursive = T)[grep('HAKE_',list.files(RootFile, recursive = T))]

# llabls <- list.dirs(RootFile) %>% .[grepl('HAKE', .)]

kaputils::ss_compare(rootdir = RootFile,
                     pattern = "Rep",
                     subplots = c(1:9,20),
                     plotloc = paste0(RootFile,"/plots/"),
                     likeCSV = F,
                     dolegend = F,
                     llabels = llabls,
                     fishery = Species)


kaputils::extractResults(rootdir = RootFile,
                         pattern = "HAKE_",
                         subpattern = 'Rep',
                         writeTables = T,
                         FleetName = c("XX","XX","All")[3])

# kaputils::plotInputSel(rootdir = RootFile, pattern = "HAKE_", c("age",   "length")[2], lmin = 0, lmax = 100, linc = 5)

refList <- read.csv(paste0(RootFile,"/results/management_quantities.csv"))
opmod <- refList[grepl("OM", refList$MOD), ] %>%    melt(id = c("MOD","REP"))

## extract EM
emod <-  refList[grepl("EM", refList$MOD), ] %>%
  melt(id = c("MOD","REP","IDX"))

relErr <- merge(opmod, emod, by = c("variable","REP")) %>%
  plyr::rename(c("value.x" = "OM_Value", 'MOD.y' = "Estimation_Model", "value.y" = "EM_Value")) %>%
  select(-MOD.x) %>%
  ## round to avoid multi-million errors on very small #s
  mutate(OM_Value = round(as.numeric(OM_Value),4),
         EM_Value = round(EM_Value,4)) %>%
  mutate("RelErr" = ifelse(as.numeric(OM_Value) != 0, abs((as.numeric(OM_Value)-EM_Value)/as.numeric(OM_Value)),
                                      abs((as.numeric(OM_Value)-EM_Value))))

write.csv(relErr, paste0(RootFile,"/results/relative_error.csv"), row.names = F)

RMSE <- relErr %>%
  group_by(Estimation_Model, variable) %>%
  dplyr::summarise('RMSE' = sqrt(mean(RelErr^2)))
#  write.csv(RMSE, paste0(RootFile,"/results/RMSE.csv"), row.names = F)

MARE <- relErr %>%
  filter(variable == 'F_FMSY'  | variable == 'SPB_SSBMSY') %>%
  
    group_by(lenIDX, variable) %>%
  dplyr::summarise('MARE' = median(RelErr))
# write.csv(RMSE, paste0(RootFile,"/results/MARE.csv"), row.names = F)


## plot
## plot it sort by descending relerr
relErr <- read.csv(paste0(RootFile,"/results/relative_error.csv")) %>% mutate(lenIDX = nchar(as.character(IDX))) 
relErr0 <- relErr  %>% filter(variable == 'F_FMSY'  | variable == 'SPB_SSBMSY') 

ggplot(relErr0, aes(x =  reorder(IDX, lenIDX), y = RelErr)) +
  theme_bw()+
  theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
  geom_bar(stat = 'identity') +
  labs(x = 'index', y = 'absolute relative error') +
  facet_wrap(~variable, scales = "free_y")

ggsave(plot = last_plot(), file = paste0(RootFile,'plots/relative_error_bar.jpg'), height = 2.625, width = 3.5, unit = 'in', dpi = 520)

## boxplots
relErr0 %>% 
  # filter(variable == 'F_FMSY') %>%
  group_by(lenIDX, variable) %>% 
  dplyr::summarise(MARE = median(RelErr)) %>%
  ggplot(., aes(x = factor(lenIDX), y = MARE) )+
  theme_bw()+
  theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
  # geom_boxplot()+
  geom_point() +
  # scale_y_continuous(limits = c(0,1)) +
  labs(x = 'No. of Corrections', y = 'Median Absolute Relative Error') +
  facet_wrap(~variable, scales = "free_y")


ggsave(plot = last_plot(), file = paste0(RootFile,'plots/relative_error_box.jpg'), height = 2.625, width = 3.5, unit = 'in', dpi = 520)

# relErr0 %>% 
#   filter(lenIDX == 1  | lenIDX == 2) %>%
#   group_by(lenIDX, variable) %>% 
#   dplyr::summarise(MARE = median(RelErr)) %>%
#   ggplot(., aes(x = factor(lenIDX), y = MARE) )+
#   theme_bw()+
#   theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
#   # geom_boxplot()+
#   geom_point() +
#   # scale_y_continuous(limits = c(0,1)) +
#   labs(x = 'No. of Corrections', y = 'relative error') +
#   facet_wrap(~variable, scales = "free_y")
# 
# 
# ggsave(plot = last_plot(), file = paste0(RootFile,'plots/relative_error_box.jpg'))


