for(s in 1:2){
# breaksdf[s,'Sex'] = c("M","F")[s]
for(t in 1:2){
newD <- data.frame(Age = mean(seq(0,94,length = 100)), ## use mean age?
Sex = c("M","F")[s],
Year = seq(1,33,length = 100),
Longitude_dd = seq(-186,-116, length = 100),
Latitude_dd = seq(0,64,length = 100))
dr <- Deriv(mod2,newdata = newD)
confint.Deriv(dr)
Term <- c("Year","Latitude_dd")[t]
m2.d <- Deriv(mod2, newdata = newD)
m2.dci <- confint(m2.d, term = Term)
# crit.eval = mean(m2.d[[Term]]$deriv) ## use mean
crit.eval = quantile(probs = c(0.05, 0.95), x=  m2.d[[Term]]$deriv) ## use tails
## identify where CI does NOT include some crit value (return NA where it does)
m2.dsig <- signifD(m2.d$eval[[Term]],
d = m2.d[[Term]]$deriv,
m2.dci[[Term]]$upper,
m2.dci[[Term]]$lower, eval = crit.eval)
pix <- c(which(!is.na(m2.dsig$incr)), which(!is.na(m2.dsig$decr)))
vals <- m2.d$eval[[Term]][pix]
breaksdf[[s]] <- c(unique(round(vals)))
}
}
breaksdf
##iterate sex
# breaksdf <- data.frame(Sex = NA, YrBreaks = NA, LatBreaks = NA)
breaksdf <- list()
idx <- 1
for(s in 1:2){
# breaksdf[s,'Sex'] = c("M","F")[s]
for(t in 1:2){
newD <- data.frame(Age = mean(seq(0,94,length = 100)), ## use mean age?
Sex = c("M","F")[s],
Year = seq(1,33,length = 100),
Longitude_dd = seq(-186,-116, length = 100),
Latitude_dd = seq(0,64,length = 100))
dr <- Deriv(mod2,newdata = newD)
confint.Deriv(dr)
Term <- c("Year","Latitude_dd")[t]
m2.d <- Deriv(mod2, newdata = newD)
m2.dci <- confint(m2.d, term = Term)
# crit.eval = mean(m2.d[[Term]]$deriv) ## use mean
crit.eval = quantile(probs = c(0.05, 0.95), x=  m2.d[[Term]]$deriv) ## use tails
## identify where CI does NOT include some crit value (return NA where it does)
m2.dsig <- signifD(m2.d$eval[[Term]],
d = m2.d[[Term]]$deriv,
m2.dci[[Term]]$upper,
m2.dci[[Term]]$lower, eval = crit.eval)
pix <- c(which(!is.na(m2.dsig$incr)), which(!is.na(m2.dsig$decr)))
vals <- m2.d$eval[[Term]][pix]
breaksdf[[idx]] <- c(unique(round(vals)))
idx <- idx+1
}
}
breaksdf
# breaksdf <- data.frame(Sex = NA, YrBreaks = NA, LatBreaks = NA)
breaksdf <- list()
idx <- 1
for(s in 1:2){
# breaksdf[s,'Sex'] = c("M","F")[s]
for(t in 1:2){
newD <- data.frame(Age = mean(seq(0,94,length = 100)), ## use mean age?
Sex = c("M","F")[s],
Year = seq(1,33,length = 100),
Longitude_dd = seq(-186,-116, length = 100),
Latitude_dd = seq(0,64,length = 100))
dr <- Deriv(mod2,newdata = newD)
confint.Deriv(dr)
Term <- c("Year","Latitude_dd")[t]
m2.d <- Deriv(mod2, newdata = newD)
m2.dci <- confint(m2.d, term = Term)
# crit.eval = mean(m2.d[[Term]]$deriv) ## use mean
crit.eval = quantile(probs = c(0.05, 0.95), x=  m2.d[[Term]]$deriv) ## use tails
## identify where CI does NOT include some crit value (return NA where it does)
m2.dsig <- signifD(m2.d$eval[[Term]],
d = m2.d[[Term]]$deriv,
m2.dci[[Term]]$upper,
m2.dci[[Term]]$lower, eval = crit.eval)
pix <- c(which(!is.na(m2.dsig$incr)), which(!is.na(m2.dsig$decr)))
vals <- m2.d$eval[[Term]][pix]
breaksdf[[idx]] <- sort(c(unique(round(vals))))
idx <- idx+1
}
}
breaksdf
for(s in 1:2){
# breaksdf[s,'Sex'] = c("M","F")[s]
for(t in 1:2){
newD <- data.frame(Age = mean(seq(0,94,length = 100)), ## use mean age?
Sex = c("M","F")[s],
Year = seq(1,33,length = 100),
Longitude_dd = seq(-186,-116, length = 100),
Latitude_dd = seq(0,64,length = 100))
dr <- Deriv(mod2,newdata = newD)
confint.Deriv(dr)
Term <- c("Year","Latitude_dd")[t]
m2.d <- Deriv(mod2, newdata = newD)
m2.dci <- confint(m2.d, term = Term)
# crit.eval = mean(m2.d[[Term]]$deriv) ## use mean
crit.eval = quantile(probs = c(0.05, 0.95), x=  m2.d[[Term]]$deriv) ## use tails
## identify where CI does NOT include some crit value (return NA where it does)
m2.dsig <- signifD(m2.d$eval[[Term]],
d = m2.d[[Term]]$deriv,
m2.dci[[Term]]$upper,
m2.dci[[Term]]$lower, eval = crit.eval)
pix <- c(which(!is.na(m2.dsig$incr)), which(!is.na(m2.dsig$decr)))
vals <- m2.d$eval[[Term]][pix]
breaksdf[[idx]] <- sort(c(unique(round(vals))))
cat(idx)
idx <- idx+1
}
}
breaksdf
plot.Deriv(m2.d, term = 'Year', cex.axis = 2, main = 'derivative of year')
plot.Deriv(m2.d, term = 'Year', cex.axis = 2, main = 'derivative of year')
abline(v = 20, col = 'red')
min(all_data$Year)
head(all_data)
summary(all_data$Year)
##iterate sex
# breaksdf <- data.frame(Sex = NA, YrBreaks = NA, LatBreaks = NA)
breaksdf <- list()
idx <- 1
for(s in 1:2){
# breaksdf[s,'Sex'] = c("M","F")[s]
for(t in 1:2){
newD <- data.frame(Age = mean(seq(0,94,length = 100)), ## use mean age?
Sex = c("M","F")[s],
Year = seq(1981,2017,length = 100),
Longitude_dd = seq(-186,-116, length = 100),
Latitude_dd = seq(0,64,length = 100))
dr <- Deriv(mod2,newdata = newD)
confint.Deriv(dr)
Term <- c("Year","Latitude_dd")[t]
m2.d <- Deriv(mod2, newdata = newD)
m2.dci <- confint(m2.d, term = Term)
# crit.eval = mean(m2.d[[Term]]$deriv) ## use mean
crit.eval = quantile(probs = c(0.05, 0.95), x=  m2.d[[Term]]$deriv) ## use tails
## identify where CI does NOT include some crit value (return NA where it does)
m2.dsig <- signifD(m2.d$eval[[Term]],
d = m2.d[[Term]]$deriv,
m2.dci[[Term]]$upper,
m2.dci[[Term]]$lower, eval = crit.eval)
pix <- c(which(!is.na(m2.dsig$incr)), which(!is.na(m2.dsig$decr)))
vals <- m2.d$eval[[Term]][pix]
breaksdf[[idx]] <- sort(c(unique(round(vals))))
cat(idx)
idx <- idx+1
}
}
breaksdf
plot.Deriv(m2.d, term = 'Year', cex.axis = 2, main = 'derivative of year')
plot(mod2,  select  =2,  scheme  =2,  lwd  =2, main = '2d Spatial Smoother', cex.axis = 2)
abline(v = breaksdf[[1]], col = 'red')
plot.Deriv(m2.d, term = 'Year', cex.axis = 2, main = 'derivative of year')
abline(v = breaksdf[[1]], col = 'red')
plot.Deriv(m2.d, term = 'Latitude_dd', cex.axis = 2, main = 'derivative of latitude')
abline(h = breaksdf[[2]], col = 'red')
plot.Deriv(m2.d, term = 'Latitude_dd', cex.axis = 2, main = 'derivative of latitude')
abline(v = breaksdf[[2]], col = 'red')
layout(matrix(1:4, ncol = 2))
plot(mod2,  select  =1,  scheme  =2,  lwd  =2, main = 'Year Smoother', cex.axis = 2)
plot(mod2,  select  =2,  scheme  =2,  lwd  =2, main = '2d Spatial Smoother', cex.axis = 2)
plot.Deriv(m2.d, term = 'Year', cex.axis = 2, main = 'derivative of year')
abline(v = breaksdf[[1]], col = 'red')
plot.Deriv(m2.d, term = 'Latitude_dd', cex.axis
png( file = paste0(getwd(),"/plots/gam_smooths1.png"), height = 6, width = 8, units = 'in', res = 500)
layout(matrix(1:4, ncol = 2))
plot(mod2,  select  =1,  scheme  =2,  lwd  =2, main = 'Year Smoother', cex.axis = 2)
plot(mod2,  select  =2,  scheme  =2,  lwd  =2, main = '2d Spatial Smoother', cex.axis = 2)
plot.Deriv(m2.d, term = 'Year', cex.axis = 2, main = 'derivative of year')
abline(v = breaksdf[[1]], col = 'red')
plot.Deriv(m2.d, term = 'Latitude_dd', cex.axis = 2, main = 'derivative of latitude')
# abline(v = breaksdf[[2]], col = 'red')
dev.off()
png( file = paste0(getwd(),"/plots/gam_smooths.png"), height = 6, width = 8, units = 'in', res = 500)
layout(matrix(1:4, ncol = 2))
plot(mod2,  select  =1,  scheme  =2,  lwd  =2, main = 'Year Smoother', cex.axis = 2)
plot(mod2,  select  =2,  scheme  =2,  lwd  =2, main = '2d Spatial Smoother', cex.axis = 2)
plot.Deriv(m2.d, term = 'Year', cex.axis = 2, main = 'derivative of year')
# abline(v = breaksdf[[1]], col = 'red')
plot.Deriv(m2.d, term = 'Latitude_dd', cex.axis = 2, main = 'derivative of latitude')
# abline(v = breaksdf[[2]], col = 'red')
dev.off()
# write.csv(ypreds, paste0(getwd(),"/results/predicts_",Sys.Date(),'.csv'),row.names = F)
ypreds <- read.csv( paste0(getwd(),"/results/predicts_",Sys.Date(),'.csv'))
# write.csv(ypreds, paste0(getwd(),"/results/predicts_",Sys.Date(),'.csv'),row.names = F)
ypreds <- read.csv( paste0(getwd(),"/results/predicts_2018-11-21.csv'))
# write.csv(ypreds, paste0(getwd(),"/results/predicts_",Sys.Date(),'.csv'),row.names = F)
ypreds <- read.csv( paste0(getwd(),"/results/predicts_2018-11-21.csv"))
ggplot(subset(ypreds, variable == vr), aes(x = Age, y = value, col = Sex )) +
theme_minimal() +
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.1),
axis.text = element_text(size = 18),
legend.text = element_text(size = 14),
strip.text = element_text(size=14))+
scale_y_continuous(limits = c(0,100)) +
scale_x_continuous(limits = c(0,50)) +
scale_color_manual(values = c("#d8b365","#5ab4ac"))+
scale_alpha(guide = 'none') +
geom_point(alpha = 0.2, aes(y = Observed_Length)) +
geom_line(lwd = 1.1) +
labs(y = 'Length (cm)', title = vr, col = "") +
facet_wrap(~ REGION)
require(ggplot2)
vr = '3 Zone'
ggplot(subset(ypreds, variable == vr), aes(x = Age, y = value, col = Sex )) +
theme_minimal() +
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.1),
axis.text = element_text(size = 18),
legend.text = element_text(size = 14),
strip.text = element_text(size=14))+
scale_y_continuous(limits = c(0,100)) +
scale_x_continuous(limits = c(0,50)) +
scale_color_manual(values = c("#d8b365","#5ab4ac"))+
scale_alpha(guide = 'none') +
geom_point(alpha = 0.2, aes(y = Observed_Length)) +
geom_line(lwd = 1.1) +
labs(y = 'Length (cm)', title = vr, col = "") +
facet_wrap(~ REGION)
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
theme_bw() +
theme(panel.grid = element_blank(),
legend.position = c(0.25,0.9),
legend.text = element_text(size = 14),
strip.text = element_text(size=14))+
scale_color_manual(values = c("#d8b365","#5ab4ac"))+
geom_point() +
geom_errorbar(aes(ymin = value - 1.96*sd, ymax = value + 1.96*sd)) +
labs(x = 'Spatial Stratum', y = "") +
facet_wrap(~model+variable, scales = "free_y")
## parest by sex and region
parest <- read.csv("C:/Users/mkapur/Dropbox/UW/sab-growth/results/parEst_2018-11-21.csv") %>% filter(variable != "Sigma")
## exponentiate logk
parest[parest$variable == 'log_k','value'] <- exp(parest[parest$variable == 'log_k','value'] )
parest$variable <- ifelse(parest$variable=='log_k',"k",paste(parest$variable))
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
theme_bw() +
theme(panel.grid = element_blank(),
legend.position = c(0.25,0.9),
legend.text = element_text(size = 14),
strip.text = element_text(size=14))+
scale_color_manual(values = c("#d8b365","#5ab4ac"))+
geom_point() +
geom_errorbar(aes(ymin = value - 1.96*sd, ymax = value + 1.96*sd)) +
labs(x = 'Spatial Stratum', y = "") +
facet_wrap(~model+variable, scales = "free_y")
require(dplyr)
## parest by sex and region
parest <- read.csv("C:/Users/mkapur/Dropbox/UW/sab-growth/results/parEst_2018-11-21.csv") %>% filter(variable != "Sigma")
## exponentiate logk
parest[parest$variable == 'log_k','value'] <- exp(parest[parest$variable == 'log_k','value'] )
parest$variable <- ifelse(parest$variable=='log_k',"k",paste(parest$variable))
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
theme_bw() +
theme(panel.grid = element_blank(),
legend.position = c(0.25,0.9),
legend.text = element_text(size = 14),
strip.text = element_text(size=14))+
scale_color_manual(values = c("#d8b365","#5ab4ac"))+
geom_point() +
geom_errorbar(aes(ymin = value - 1.96*sd, ymax = value + 1.96*sd)) +
labs(x = 'Spatial Stratum', y = "") +
facet_wrap(~model+variable, scales = "free_y")
require(TMB); require(dplyr); require(ggplot2); require(reshape)
options(scipen=999)
rm(list = ls())
## load objects made in dataprep
setwd("C:/Users/mkapur/Dropbox/UW/sab-growth")
load( paste0(getwd(),"/data/all_data.rda")) ## all_data
load( paste0(getwd(),"/data/DES.rda")) ## DES
# load( paste0(getwd(),"/data/REG.rda")) ## REG
# load( paste0(getwd(),"/data/SEL.rda")) ## SEL
load( paste0(getwd(),"/data/KEY.rda")) ## KEY
compile("sptlvb.cpp")
dyn.load(dynlib("sptlvb"))
dat0 <- rep0 <- aic0 <- NULL ## later storage
s = 2
nStrata <- length(unique(DES[,s]))
nStrata
data <-
list(
Length_cm = all_data[,"Length_cm"],
Age = all_data[,"Age"],
DES = as.vector(DES[,s]),
nStrata = nStrata
)
parameters <-
list(
log_Linf = rep(log(70), nStrata),
log_k = rep(log(0.5), nStrata),
t0 = rep(0, nStrata),
log_Sigma = 0
)
# Now estimate everything
map <- NULL
model <- MakeADFun(data, parameters,  DLL="sptlvb",silent=T,map=map)
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 10000
)
)
best <- model$env$last.par.best
rep <- sdreport(model)
dat0 <- c(dat0, model$report()$ypreds %>% data.frame()) ## each 6 cols is new sim
rep0 <- bind_rows(rep0, bind_cols(data.frame(names(rep$value)),data.frame(rep$value),data.frame(rep$sd),data.frame(c(rep(unique(KEY[,s]),3), rep("ALL",1)))))
aic0 <- c(aic0, model$report()$aic %>% data.frame())
rep0
names(rep0) <- c('variable', 'value','sd', 'ID')
rep0 %>% mutate(
model = c(
rep('Pooled',length(unique(DES[,1]))*3 + 1),
rep('3 Zone', length(unique(DES[,2]))*3 + 1),
rep('Lit', length(unique(DES[,3]))*3 + 1),
rep('Survey Strata', length(unique(DES[,4]))*3 + 1)
),
Sex = sub('_.*$', '', ID),
st = sub(".*_ *(._?)", "\\1", ID)
) %>% select(-ID)
dat0 <- rep0 <- aic0 <- NULL ## later storage
for(s in c(1:ncol(DES))){ ## 4 hypotheses for spatial groupings
nStrata <- length(unique(DES[,s]))
data <-
list(
Length_cm = all_data[,"Length_cm"],
Age = all_data[,"Age"],
DES = as.vector(DES[,s]),
nStrata = nStrata
)
parameters <-
list(
log_Linf = rep(log(70), nStrata),
log_k = rep(log(0.5), nStrata),
t0 = rep(0, nStrata),
log_Sigma = 0
)
# Now estimate everything
map <- NULL
model <- MakeADFun(data, parameters,  DLL="sptlvb",silent=T,map=map)
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 10000
)
)
# for (k in 1:3)  fit <- nlminb(model$env$last.par.best, model$fn, model$gr) ## start at last-best call, for stability
best <- model$env$last.par.best
rep <- sdreport(model)
dat0 <- c(dat0, model$report()$ypreds %>% data.frame()) ## each 6 cols is new sim
rep0 <- bind_rows(rep0, bind_cols(data.frame(names(rep$value)),data.frame(rep$value),data.frame(rep$sd),data.frame(c(rep(unique(KEY[,s]),3), rep("ALL",1)))))
aic0 <- c(aic0, model$report()$aic %>% data.frame())
}
names(rep0) <- c('variable', 'value','sd', 'ID')
rep0
s = 2
nStrata <- length(unique(DES[,s]))
data <-
list(
Length_cm = all_data[,"Length_cm"],
Age = all_data[,"Age"],
DES = as.vector(DES[,s]),
nStrata = nStrata
)
parameters <-
list(
log_Linf = rep(log(70), nStrata),
log_k = rep(log(0.5), nStrata),
t0 = rep(0, nStrata),
log_Sigma = 0
)
# Now estimate everything
map <- NULL
model <- MakeADFun(data, parameters,  DLL="sptlvb",silent=T,map=map)
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 10000
)
)
# for (k in 1:3)  fit <- nlminb(model$env$last.par.best, model$fn, model$gr) ## start at last-best call, for stability
best <- model$env$last.par.best
rep <- sdreport(model)
dat0 <- c(dat0, model$report()$ypreds %>% data.frame()) ## each 6 cols is new sim
rep0 <- bind_rows(rep0, bind_cols(data.frame(names(rep$value)),data.frame(rep$value),data.frame(rep$sd),data.frame(c(rep(unique(KEY[,s]),3), rep("ALL",1)))))
aic0 <- c(aic0, model$report()$aic %>% data.frame())
rm(rep0)
dat0 <- rep0 <- aic0 <- NULL ## later storage
nStrata <- length(unique(DES[,s]))
data <-
list(
Length_cm = all_data[,"Length_cm"],
Age = all_data[,"Age"],
DES = as.vector(DES[,s]),
nStrata = nStrata
)
parameters <-
list(
log_Linf = rep(log(70), nStrata),
log_k = rep(log(0.5), nStrata),
t0 = rep(0, nStrata),
log_Sigma = 0
)
# Now estimate everything
map <- NULL
model <- MakeADFun(data, parameters,  DLL="sptlvb",silent=T,map=map)
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 10000
)
)
# for (k in 1:3)  fit <- nlminb(model$env$last.par.best, model$fn, model$gr) ## start at last-best call, for stability
best <- model$env$last.par.best
rep <- sdreport(model)
dat0 <- c(dat0, model$report()$ypreds %>% data.frame()) ## each 6 cols is new sim
rep0 <- bind_rows(rep0, bind_cols(data.frame(names(rep$value)),data.frame(rep$value),data.frame(rep$sd),data.frame(c(rep(unique(KEY[,s]),3), rep("ALL",1)))))
aic0 <- c(aic0, model$report()$aic %>% data.frame())
rep0
ypreds0 <- cbind(dat0,all_data) %>% data.frame()
names(ypreds0)[1:6] <- c('Pooled','3 Zone', 'Lit', 'Survey Strata', 'Age', 'Observed_Length')
ypreds <- ypreds0 %>% melt(id = c("Age","Sex","Observed_Length", "H2","H3","H4"))  %>%
mutate('REGION' = ifelse(variable == 'Pooled',"ALL",
ifelse(variable == '3 Zone',H2,
ifelse(variable == 'Lit',H3,
H4)))) %>% select(-H2,-H3,-H4)
dat0
ypreds0 <- cbind(dat0,all_data) %>% data.frame()
names(ypreds0)[1:6] <- c('Pooled','3 Zone', 'Lit', 'Survey Strata', 'Age', 'Observed_Length')
ypreds <- ypreds0 %>% melt(id = c("Age","Sex","Observed_Length", "H2","H3","H4"))  %>%
mutate('REGION' = ifelse(variable == 'Pooled',"ALL",
ifelse(variable == '3 Zone',H2,
ifelse(variable == 'Lit',H3,
H4)))) %>% select(-H2,-H3,-H4)
preds0 %>% melt(id = c("Age","Sex","Observed_Length", "H2","H3","H4"))
rep0
dat0 <- rep0 <- aic0 <- NULL ## later storage
nStrata <- length(unique(DES[,s]))
data <-
list(
Length_cm = all_data[,"Length_cm"],
Age = all_data[,"Age"],
DES = as.vector(DES[,s]),
nStrata = nStrata
)
parameters <-
list(
log_Linf = rep(log(70), nStrata),
log_k = rep(log(0.5), nStrata),
t0 = rep(0, nStrata),
log_Sigma = 0
)
# Now estimate everything
map <- NULL
model <- MakeADFun(data, parameters,  DLL="sptlvb",silent=T,map=map)
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 10000
)
)
# for (k in 1:3)  fit <- nlminb(model$env$last.par.best, model$fn, model$gr) ## start at last-best call, for stability
best <- model$env$last.par.best
rep <- sdreport(model)
dat0 <- c(dat0, model$report()$ypreds %>% data.frame()) ## each 6 cols is new sim
rep0 <- bind_rows(rep0, bind_cols(data.frame(names(rep$value)),data.frame(rep$value),data.frame(rep$sd),data.frame(c(rep(unique(KEY[,s]),3), rep("ALL",1)))))
aic0 <- c(aic0, model$report()$aic %>% data.frame())
rep0
rep
KEY[,s]
(unique(KEY[,s])
)
bind_rows(rep0, bind_cols(data.frame(names(rep$value)),data.frame(rep$value),data.frame(rep$sd),data.frame(c(rep(unique(KEY[,s]),3), rep("ALL",1)))))
DES[,s]
head(cbind(DES[,s],KEY[,s]))
View(cbind(DES[,s],KEY[,s]))
head(all_data)
View(cbind(DES[,s],KEY[,s],all_data))
View(cbind(DES[,s],KEY[,s],all_data,ypred))
View(cbind(DES[,s],KEY[,s],all_data,ypreds))
cbind(DES[,s],KEY[,s],all_data)[,555]
cbind(DES[,s],KEY[,s],all_data)[555,]
cbind(DES[,s],KEY[,s],all_data)[10222,]
cbind(DES[,s],KEY[,s],all_data)[44444,]
cbind(DES[,s],KEY[,s],all_data)[30000,]
cbind(DES[,s],KEY[,s],all_data)[30303,]
rep
rep0
