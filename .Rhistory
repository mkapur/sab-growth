pd <- plot(mod,   select = t, scheme  =2, lwd  =2, main = paste0(Terms[t],' Smoother'), cex.axis = 2, ylim = c(-10,ifelse(t != 3,10,500)))
temp0 <- pd[t] ## get this smoother
temp <- data.frame(cbind(temp0[[1]]$x,temp0[[1]]$fit, temp0[[1]]$se)); names(temp) = c('x','fit','se')
if(t == 1){
xlims <- c(0,100)
} else{ xlims <- c(0,50)}
## plot smooth
plist[[idx]] <-  ggplot(temp, aes(x = x, y = fit)) +
theme_minimal() +
theme(panel.grid = element_blank())+
geom_line(lwd = 1.1) +
scale_x_continuous(limits = xlims) +
geom_line(aes(y= fit-se), linetype = 'dashed') +
geom_line(aes(y= fit+se), linetype = 'dashed') +
geom_rug(sides = 'b') +
labs(x = Terms[t], y = "smoother", title = paste0(letters[idx-1],") ",'Smoother for ',Terms[t] ))
idx <- idx+1
CI <- confint(m2.d, term = Terms[t])
m2.dtemp <- data.frame(cbind(m2.d$eval[,Terms[t]], m2.d[[Terms[t]]]$deriv,
CI[[1]]$upper, CI[[1]]$lower)); names(m2.dtemp) = c('x','deriv','upper','lower')
## plot deriv
# if(i < 5){
plist[[idx]] <-  ggplot(m2.dtemp,aes(x = x, y = deriv))    +
theme_minimal() +
theme(panel.grid = element_blank())+
geom_line(lwd = 1.1) +
scale_x_continuous(limits = xlims) +
geom_hline(yintercept = 0, col = 'grey22') +
geom_line(aes(y= upper), linetype = 'dashed') +
geom_line(aes(y= lower), linetype = 'dashed') +
geom_vline(xintercept = breaksdf[,c('yr_breaks','lat_breaks','lon_breaks')[t]],
col = 'red', lwd = 1.1, linetype = 'dashed') +
labs(x = Terms[t], y = "f'(x)", title = paste0(letters[idx-1],") ",'First Derivative for ', Terms[t]))
idx <- idx+1
} ## end Terms
lay <- rbind(c(2,2,1,1,1),
c(3,3,1,1,1),
c(4,4,1,1,1),
c(5,5,1,1,1),
c(6,6,1,1,1),
c(7,7,1,1,1))
grid.arrange(grobs = plist[1:7], layout_matrix = lay)
i = 2
plist  <- list(); idx <- 1
## plot raw data
scen <- scens[i]
tempdf <- read.csv(paste0("./IBM_output/datasets/",scen,"_",bootpicks[i],".csv")) %>% filter(Age == 6)
breaksdf <- cdf_gam %>%
filter(scen == scens[i] & boot == bootpicks[i]) %>%
select(scen, boot,lat_breaks = gamLAT, lon_breaks = gamLON,yr_breaks = gamYR )
# breaksdf <-read.csv( paste0("./GAM_output/ldf_raw_a6.csv")) %>% filter(scen == scens[i] & boot == bootpicks[i])
load(file = paste0("./GAM_output/mod_",scen,"_",bootpicks[i],".rds")) ## mod for boot 4
load(file = paste0("./GAM_output/m2d_",scen,"_",bootpicks[i],".rds")) ## m2.d for boot 4 (contains derivative info)
Terms <- c("Year","Latitude_dd","Longitude_dd")
if(i < 5){ ## plot tempvar separately
plist0[[idx0]]  <- ggplot(tempdf, aes(y = Latitude_dd, x = Longitude_dd)) +
theme_classic() +
# theme(legend.position = 'none') +
scale_y_continuous(limits = c(-10,60), breaks = seq(0,50,10)) +
geom_point(aes(size = Length_cm, fill = Length_cm), shape = 21, alpha = 0.7) +
scale_fill_gradient2(low = 'black', mid = "grey44",
high ="grey77", midpoint = 65, guide = 'legend') +
scale_size_continuous(range = c(2, 15), guide = 'legend') +
labs(x = 'Longitude',y = 'Latitude',
fill = "Length of Age-6 Fish (cm)",size  = "Length of Age-6 Fish (cm)",
title = paste0(scens.title0[i])) #+
# geom_label(x = 10, y = 50, label = paste0('n = ',nrow(tempdf)),
#            size = 4, fill = 'white')
idx0 <- idx0+1
}
if(i == 5){ ## plot tempvar separately
plist0[[5]]  <- ggplot(tempdf, aes(x = Year, y = Length_cm)) +
theme_classic() +
scale_y_continuous(limits = c(58,80)) +
geom_point(aes(size = Length_cm, fill = Length_cm), shape = 21, alpha = 0.7) +
scale_fill_gradient2(low = 'black', mid = "grey44",
high ="grey77", midpoint = 65, guide = 'legend') +
scale_size_continuous(range = c(2, 15), guide = 'legend') +
labs(x = 'Year', y = 'Length of Age Six Fish (cm)',
fill = "Length of Age-6 Fish (cm)",size  = "Length of Age-6 Fish (cm)",
title = paste0(scens.title0[i])) #+
}
ggsave(plot = last_plot(),  file = paste0("./figures/rawdat_",scen,".png"),
width = 5, height = 5, units = 'in', dpi = 480)
## map showing new breaks
if(i < 5){
plist[[idx]] <- ggplot(tempdf, aes(y = Latitude_dd, x = Longitude_dd)) +
theme_classic() +
theme(legend.position = 'right') +
scale_y_continuous(limits = c(0,50), breaks = seq(0,50,10)) +
geom_point(aes(size = Length_cm, fill = Length_cm), shape = 21, alpha = 0.7) +
scale_fill_gradient2(low = 'black', mid = "grey44",
high ="grey77", midpoint = 65, guide = 'legend') +
scale_size_continuous(range = c(2, 15), guide = 'legend') +
labs(x = 'Longitude',y = 'Latitude',
fill = "Length of Age-6 Fish (cm)",size  = "Length of Age-6 Fish (cm)",
title = paste0(scens.title[i], ' Data and GAM-detected breaks ')) +
geom_hline(yintercept = breaksdf$lat_breaks, lwd = 1.1, linetype = 'dashed', col = 'red') +
geom_vline(xintercept = breaksdf$lon_breaks, lwd = 1.1, linetype = 'dashed', col = 'red')
idx <- idx + 1
}
if(i == 5){ ## plot tempvar separately
plist[[idx]] <- ggplot(tempdf, aes(x = Year, y = Length_cm)) +
theme_classic() +
theme(legend.position = 'right') +
scale_y_continuous(limits = c(58,80)) +
geom_point(aes(size = Length_cm, fill = Length_cm), shape = 21, alpha = 0.7) +
scale_fill_gradient2(low = 'black', mid = "grey44",
high ="grey77", midpoint = 65, guide = 'legend') +
scale_size_continuous(range = c(2, 15), guide = 'legend') +
labs(x = 'Year', y = 'Length of Age Six Fish (cm)',
fill = "Length of Age-6 Fish (cm)",size  = "Length of Age-6 Fish (cm)",
title = paste0(scens.title0[i])) +
# geom_label(x = 10, y = 400, label = paste0('n = ',nrow(tempdf)),
#            size = 4, fill = 'white') +
geom_vline(xintercept = breaksdf$yr_breaks, lwd = 1.1, linetype = 'dashed', col = 'red')
idx <- idx + 1
}
# ## plot GAM smooth and deriv -- will have to be from single, sorta-representative boot
for(t in 1:length(Terms)){
pd <- plot(mod,   select = t, scheme  =2, lwd  =2, main = paste0(Terms[t],' Smoother'), cex.axis = 2, ylim = c(-10,ifelse(t != 3,10,500)))
temp0 <- pd[t] ## get this smoother
temp <- data.frame(cbind(temp0[[1]]$x,temp0[[1]]$fit, temp0[[1]]$se)); names(temp) = c('x','fit','se')
if(t == 1){
xlims <- c(0,100)
} else{ xlims <- c(0,50)}
## plot smooth
plist[[idx]] <-  ggplot(temp, aes(x = x, y = fit)) +
theme_minimal() +
theme(panel.grid = element_blank())+
geom_line(lwd = 1.1) +
scale_x_continuous(limits = xlims) +
geom_line(aes(y= fit-se), linetype = 'dashed') +
geom_line(aes(y= fit+se), linetype = 'dashed') +
geom_rug(sides = 'b') +
labs(x = Terms[t], y = "smoother", title = paste0(letters[idx-1],") ",'Smoother for ',Terms[t] ))
idx <- idx+1
CI <- confint(m2.d, term = Terms[t])
m2.dtemp <- data.frame(cbind(m2.d$eval[,Terms[t]], m2.d[[Terms[t]]]$deriv,
CI[[1]]$upper, CI[[1]]$lower)); names(m2.dtemp) = c('x','deriv','upper','lower')
## plot deriv
# if(i < 5){
plist[[idx]] <-  ggplot(m2.dtemp,aes(x = x, y = deriv))    +
theme_minimal() +
theme(panel.grid = element_blank())+
geom_line(lwd = 1.1) +
scale_x_continuous(limits = xlims) +
geom_hline(yintercept = 0, col = 'grey22') +
geom_line(aes(y= upper), linetype = 'dashed') +
geom_line(aes(y= lower), linetype = 'dashed') +
geom_vline(xintercept = breaksdf[,c('yr_breaks','lat_breaks','lon_breaks')[t]],
col = 'red', lwd = 1.1, linetype = 'dashed') +
labs(x = Terms[t], y = "f'(x)", title = paste0(letters[idx-1],") ",'First Derivative for ', Terms[t]))
idx <- idx+1
} ## end Terms
lay <- rbind(c(2,2,1,1,1),
c(3,3,1,1,1),
c(4,4,1,1,1),
c(5,5,1,1,1),
c(6,6,1,1,1),
c(7,7,1,1,1))
grid.arrange(grobs = plist[1:7], layout_matrix = lay)
plist0 <- list(); idx0 <- 1
for(i in 1:length(scens)){
plist  <- list(); idx <- 1
## plot raw data
scen <- scens[i]
tempdf <- read.csv(paste0("./IBM_output/datasets/",scen,"_",bootpicks[i],".csv")) %>% filter(Age == 6)
breaksdf <- cdf_gam %>%
filter(scen == scens[i] & boot == bootpicks[i]) %>%
select(scen, boot,lat_breaks = gamLAT, lon_breaks = gamLON,yr_breaks = gamYR )
# breaksdf <-read.csv( paste0("./GAM_output/ldf_raw_a6.csv")) %>% filter(scen == scens[i] & boot == bootpicks[i])
load(file = paste0("./GAM_output/mod_",scen,"_",bootpicks[i],".rds")) ## mod for boot 4
load(file = paste0("./GAM_output/m2d_",scen,"_",bootpicks[i],".rds")) ## m2.d for boot 4 (contains derivative info)
Terms <- c("Year","Latitude_dd","Longitude_dd")
if(i < 5){ ## plot tempvar separately
plist0[[idx0]]  <- ggplot(tempdf, aes(y = Latitude_dd, x = Longitude_dd)) +
theme_classic() +
# theme(legend.position = 'none') +
scale_y_continuous(limits = c(-10,60), breaks = seq(0,50,10)) +
geom_point(aes(size = Length_cm, fill = Length_cm), shape = 21, alpha = 0.7) +
scale_fill_gradient2(low = 'black', mid = "grey44",
high ="grey77", midpoint = 65, guide = 'legend') +
scale_size_continuous(range = c(2, 15), guide = 'legend') +
labs(x = 'Longitude',y = 'Latitude',
fill = "Length of Age-6 Fish (cm)",size  = "Length of Age-6 Fish (cm)",
title = paste0(scens.title0[i])) #+
# geom_label(x = 10, y = 50, label = paste0('n = ',nrow(tempdf)),
#            size = 4, fill = 'white')
idx0 <- idx0+1
}
if(i == 5){ ## plot tempvar separately
plist0[[5]]  <- ggplot(tempdf, aes(x = Year, y = Length_cm)) +
theme_classic() +
scale_y_continuous(limits = c(58,80)) +
geom_point(aes(size = Length_cm, fill = Length_cm), shape = 21, alpha = 0.7) +
scale_fill_gradient2(low = 'black', mid = "grey44",
high ="grey77", midpoint = 65, guide = 'legend') +
scale_size_continuous(range = c(2, 15), guide = 'legend') +
labs(x = 'Year', y = 'Length of Age Six Fish (cm)',
fill = "Length of Age-6 Fish (cm)",size  = "Length of Age-6 Fish (cm)",
title = paste0(scens.title0[i])) #+
}
ggsave(plot = last_plot(),  file = paste0("./figures/rawdat_",scen,".png"),
width = 5, height = 5, units = 'in', dpi = 480)
## map showing new breaks
if(i < 5){
plist[[idx]] <- ggplot(tempdf, aes(y = Latitude_dd, x = Longitude_dd)) +
theme_classic() +
theme(legend.position = 'right') +
scale_y_continuous(limits = c(0,50), breaks = seq(0,50,10)) +
geom_point(aes(size = Length_cm, fill = Length_cm), shape = 21, alpha = 0.7) +
scale_fill_gradient2(low = 'black', mid = "grey44",
high ="grey77", midpoint = 65, guide = 'legend') +
scale_size_continuous(range = c(2, 15), guide = 'legend') +
labs(x = 'Longitude',y = 'Latitude',
fill = "Length of Age-6 Fish (cm)",size  = "Length of Age-6 Fish (cm)",
title = paste0(scens.title[i], ' Data and GAM-detected breaks ')) +
geom_hline(yintercept = breaksdf$lat_breaks, lwd = 1.1, linetype = 'dashed', col = 'red') +
geom_vline(xintercept = breaksdf$lon_breaks, lwd = 1.1, linetype = 'dashed', col = 'red')
idx <- idx + 1
}
if(i == 5){ ## plot tempvar separately
plist[[idx]] <- ggplot(tempdf, aes(x = Year, y = Length_cm)) +
theme_classic() +
theme(legend.position = 'right') +
scale_y_continuous(limits = c(58,80)) +
geom_point(aes(size = Length_cm, fill = Length_cm), shape = 21, alpha = 0.7) +
scale_fill_gradient2(low = 'black', mid = "grey44",
high ="grey77", midpoint = 65, guide = 'legend') +
scale_size_continuous(range = c(2, 15), guide = 'legend') +
labs(x = 'Year', y = 'Length of Age Six Fish (cm)',
fill = "Length of Age-6 Fish (cm)",size  = "Length of Age-6 Fish (cm)",
title = paste0(scens.title0[i])) +
# geom_label(x = 10, y = 400, label = paste0('n = ',nrow(tempdf)),
#            size = 4, fill = 'white') +
geom_vline(xintercept = breaksdf$yr_breaks, lwd = 1.1, linetype = 'dashed', col = 'red')
idx <- idx + 1
}
# ## plot GAM smooth and deriv -- will have to be from single, sorta-representative boot
for(t in 1:length(Terms)){
pd <- plot(mod,   select = t, scheme  =2, lwd  =2, main = paste0(Terms[t],' Smoother'), cex.axis = 2, ylim = c(-10,ifelse(t != 3,10,500)))
temp0 <- pd[t] ## get this smoother
temp <- data.frame(cbind(temp0[[1]]$x,temp0[[1]]$fit, temp0[[1]]$se)); names(temp) = c('x','fit','se')
if(t == 1){
xlims <- c(0,100)
} else{ xlims <- c(0,50)}
## plot smooth
plist[[idx]] <-  ggplot(temp, aes(x = x, y = fit)) +
theme_minimal() +
theme(panel.grid = element_blank())+
geom_line(lwd = 1.1) +
scale_x_continuous(limits = xlims) +
geom_line(aes(y= fit-se), linetype = 'dashed') +
geom_line(aes(y= fit+se), linetype = 'dashed') +
geom_rug(sides = 'b') +
labs(x = Terms[t], y = "smoother", title = paste0(letters[idx-1],") ",'Smoother for ',Terms[t] ))
idx <- idx+1
CI <- confint(m2.d, term = Terms[t])
m2.dtemp <- data.frame(cbind(m2.d$eval[,Terms[t]], m2.d[[Terms[t]]]$deriv,
CI[[1]]$upper, CI[[1]]$lower)); names(m2.dtemp) = c('x','deriv','upper','lower')
## plot deriv
# if(i < 5){
plist[[idx]] <-  ggplot(m2.dtemp,aes(x = x, y = deriv))    +
theme_minimal() +
theme(panel.grid = element_blank())+
geom_line(lwd = 1.1) +
scale_x_continuous(limits = xlims) +
geom_hline(yintercept = 0, col = 'grey22') +
geom_line(aes(y= upper), linetype = 'dashed') +
geom_line(aes(y= lower), linetype = 'dashed') +
geom_vline(xintercept = breaksdf[,c('yr_breaks','lat_breaks','lon_breaks')[t]],
col = 'red', lwd = 1.1, linetype = 'dashed') +
labs(x = Terms[t], y = "f'(x)", title = paste0(letters[idx-1],") ",'First Derivative for ', Terms[t]))
idx <- idx+1
} ## end Terms
lay <- rbind(c(2,2,1,1,1),
c(3,3,1,1,1),
c(4,4,1,1,1),
c(5,5,1,1,1),
c(6,6,1,1,1),
c(7,7,1,1,1))
grid.arrange(grobs = plist[1:7], layout_matrix = lay) %>%
ggsave(plot = .,  file = paste0("./figures/GAM_analysis_",scen,".png"), width = 11, height = 8, units = 'in', dpi = 480)
}
## predicts and parest for sab ----
## parest: see if actually different. PHASE 1 = pre-merge, PHASE 2- temporal merges
usedate <- "2018-10-04" #Sys.Date() ## USE TODAY
## Get numbers by category for final phase.
ypreds <- read.csv(paste0("./GAM_output/SAB_predicts_",usedate,"_phase2.csv"))
## predicts and parest for sab ----
## parest: see if actually different. PHASE 1 = pre-merge, PHASE 2- temporal merges
usedate <- "2019-10-04" #Sys.Date() ## USE TODAY
## Get numbers by category for final phase.
ypreds <- read.csv(paste0("./GAM_output/SAB_predicts_",usedate,"_phase2.csv"))
head(ypreds)
ypreds %>% group_by(cREG) %>% summarise(N = n())
require(dplyr)
## Get numbers by category for final phase.
ypreds <- read.csv(paste0("./GAM_output/SAB_predicts_",usedate,"_phase2.csv"))
samplesize <- ypreds %>% group_by(cREG) %>% summarise(N = n())
sabpe <- read.csv("./GAM_output/SAB_parEst_gam_2019-10-04_phase2.csv")
sabpe %>%
mutate(REG = as.character(REG)) %>%
select(-sd) %>%
filter(variable != 'Sigma') %>%
mutate(sampN = samplesize,
Region = substr(REG,1,2),
Period =  sapply(strsplit(REG, "_"), function(x) x[2]),
Sex = sub('(^[^_]+_[^_]+)_(.*
)$', '\\2', REG) ) %>%
tidyr::spread(key = variable, value = value) %>%
mutate(   L1_0.5 = round(LR(Linf, k, t0, AREF = 0.5),2)) %>%
mutate(L1 = ifelse(L1_0.5 <0, L1, L1_0.5)) %>%
select(Region, Sex, Period, sampN, Linf, k, t0, L1, L2)
sabpe %>%
mutate(REG = as.character(REG)) %>%
select(-sd) %>%
filter(variable != 'Sigma') %>%
mutate(sampN = ypreds %>% group_by(cREG) %>% summarise(N = n()),
Region = substr(REG,1,2),
Period =  sapply(strsplit(REG, "_"), function(x) x[2]),
Sex = sub('(^[^_]+_[^_]+)_(.*
)$', '\\2', REG) ) %>%
tidyr::spread(key = variable, value = value) %>%
mutate(   L1_0.5 = round(LR(Linf, k, t0, AREF = 0.5),2)) %>%
mutate(L1 = ifelse(L1_0.5 <0, L1, L1_0.5)) %>%
select(Region, Sex, Period, sampN, Linf, k, t0, L1, L2)
samplesize
samplesize <- ypreds %>% group_by(cREG) %>% summarise(N = n()) %>% select(N)
sabpe %>%
mutate(REG = as.character(REG)) %>%
select(-sd) %>%
filter(variable != 'Sigma') %>%
mutate(sampN = ypreds %>% group_by(cREG) %>% summarise(N = n()),
Region = substr(REG,1,2),
Period =  sapply(strsplit(REG, "_"), function(x) x[2]),
Sex = sub('(^[^_]+_[^_]+)_(.*
)$', '\\2', REG) ) %>%
tidyr::spread(key = variable, value = value) %>%
mutate(   L1_0.5 = round(LR(Linf, k, t0, AREF = 0.5),2)) %>%
mutate(L1 = ifelse(L1_0.5 <0, L1, L1_0.5)) %>%
select(Region, Sex, Period, sampN, Linf, k, t0, L1, L2)
sabpe %>%
mutate(REG = as.character(REG)) %>%
select(-sd) %>%
filter(variable != 'Sigma') %>%
mutate(sampN =samplesize,
Region = substr(REG,1,2),
Period =  sapply(strsplit(REG, "_"), function(x) x[2]),
Sex = sub('(^[^_]+_[^_]+)_(.*
)$', '\\2', REG) ) %>%
tidyr::spread(key = variable, value = value) %>%
mutate(   L1_0.5 = round(LR(Linf, k, t0, AREF = 0.5),2)) %>%
mutate(L1 = ifelse(L1_0.5 <0, L1, L1_0.5)) %>%
select(Region, Sex, Period, sampN, Linf, k, t0, L1, L2)
samplesize
samplesize <- ypreds %>% group_by(cREG) %>% summarise(N = n()) %>% select(N) %>% as.vector()
samplesize
class(samplesize)
sabpe %>%
mutate(REG = as.character(REG)) %>%
select(-sd) %>%
filter(variable != 'Sigma') %>%
mutate(sampN = NA,
Region = substr(REG,1,2),
Period =  sapply(strsplit(REG, "_"), function(x) x[2]),
Sex = sub('(^[^_]+_[^_]+)_(.*
)$', '\\2', REG) ) %>%
tidyr::spread(key = variable, value = value) %>%
mutate(   L1_0.5 = round(LR(Linf, k, t0, AREF = 0.5),2)) %>%
mutate(L1 = ifelse(L1_0.5 <0, L1, L1_0.5)) %>%
select(Region, Sex, Period, sampN, Linf, k, t0, L1, L2)
sabepe$sampN <- ypreds %>% group_by(cREG) %>% summarise(N = n()) %>% select(N) %>% as.vector()
sabpe$sampN <- ypreds %>% group_by(cREG) %>% summarise(N = n()) %>% select(N) %>% as.vector()
sabpe
sabpe <- sabpe %>%
mutate(REG = as.character(REG)) %>%
select(-sd) %>%
filter(variable != 'Sigma') %>%
mutate(sampN = NA,
Region = substr(REG,1,2),
Period =  sapply(strsplit(REG, "_"), function(x) x[2]),
Sex = sub('(^[^_]+_[^_]+)_(.*
)$', '\\2', REG) ) %>%
tidyr::spread(key = variable, value = value) %>%
mutate(   L1_0.5 = round(LR(Linf, k, t0, AREF = 0.5),2)) %>%
mutate(L1 = ifelse(L1_0.5 <0, L1, L1_0.5)) %>%
select(Region, Sex, Period, sampN, Linf, k, t0, L1, L2)
sabpe$sampN <- ypreds %>% group_by(cREG) %>% summarise(N = n()) %>% select(N) %>% as.vector()
sabpe
sabpe$sampN <- ypreds %>% group_by(cREG) %>% summarise(N = n()) %>% select(N)
sabpe
ypreds %>% group_by(cREG) %>% summarise(N = n()) %>% select(N)
cbind(sabpe, ypreds %>% group_by(cREG) %>% summarise(N = n()) %>% select(N))
ypreds %>% group_by(cREG) %>% summarise(N = n()) %>% select(N)
sabpe <- sabpe %>%
mutate(REG = as.character(REG)) %>%
select(-sd) %>%
filter(variable != 'Sigma') %>%
mutate(sampN = samplesize,
Region = substr(REG,1,2),
Period =  sapply(strsplit(REG, "_"), function(x) x[2]),
Sex = sub('(^[^_]+_[^_]+)_(.*
)$', '\\2', REG) ) %>%
tidyr::spread(key = variable, value = value) %>%
mutate(   L1_0.5 = round(LR(Linf, k, t0, AREF = 0.5),2)) %>%
mutate(L1 = ifelse(L1_0.5 <0, L1, L1_0.5)) %>%
select(Region, Sex, Period, sampN, Linf, k, t0, L1, L2)
sabpe <- read.csv("./GAM_output/SAB_parEst_gam_2019-10-04_phase2.csv")
sabpe %>%
mutate(REG = as.character(REG)) %>%
select(-sd) %>%
filter(variable != 'Sigma') %>%
mutate(sampN = samplesize,
Region = substr(REG,1,2),
Period =  sapply(strsplit(REG, "_"), function(x) x[2]),
Sex = sub('(^[^_]+_[^_]+)_(.*
)$', '\\2', REG) ) %>%
tidyr::spread(key = variable, value = value) %>%
mutate(   L1_0.5 = round(LR(Linf, k, t0, AREF = 0.5),2)) %>%
mutate(L1 = ifelse(L1_0.5 <0, L1, L1_0.5)) %>%
select(Region, Sex, Period, sampN, Linf, k, t0, L1, L2)
sabpe <- read.csv("./GAM_output/SAB_parEst_gam_2019-10-04_phase2.csv")
sabpe %>%
mutate(REG = as.character(REG)) %>%
select(-sd) %>%
filter(variable != 'Sigma') %>%
mutate(sampN = list(samplesize),
Region = substr(REG,1,2),
Period =  sapply(strsplit(REG, "_"), function(x) x[2]),
Sex = sub('(^[^_]+_[^_]+)_(.*
)$', '\\2', REG) ) %>%
tidyr::spread(key = variable, value = value) %>%
mutate(   L1_0.5 = round(LR(Linf, k, t0, AREF = 0.5),2)) %>%
mutate(L1 = ifelse(L1_0.5 <0, L1, L1_0.5)) %>%
select(Region, Sex, Period, sampN, Linf, k, t0, L1, L2)
sabpe <- sabpe %>%
mutate(REG = as.character(REG)) %>%
select(-sd) %>%
filter(variable != 'Sigma') %>%
mutate(sampN = NA,
Region = substr(REG,1,2),
Period =  sapply(strsplit(REG, "_"), function(x) x[2]),
Sex = sub('(^[^_]+_[^_]+)_(.*
)$', '\\2', REG) ) %>%
tidyr::spread(key = variable, value = value) %>%
mutate(   L1_0.5 = round(LR(Linf, k, t0, AREF = 0.5),2)) %>%
mutate(L1 = ifelse(L1_0.5 <0, L1, L1_0.5)) %>%
select(Region, Sex, Period, sampN, Linf, k, t0, L1, L2)
cbind(sabpe, ypreds %>% group_by(cREG) %>% summarise(N = n()) %>% select(N))
cbind(sabpe, ypreds %>% group_by(cREG) %>% summarise(N = n()) %>% select(N)) %>%
select(Region, Sex, Period, N, Linf, k, t0, L1, L2)
sabpe <- read.csv("./GAM_output/SAB_parEst_gam_2019-10-04_phase2.csv")
sabpe <- sabpe %>%
mutate(REG = as.character(REG)) %>%
select(-sd) %>%
filter(variable != 'Sigma') %>%
mutate(
Region = substr(REG,1,2),
Period =  sapply(strsplit(REG, "_"), function(x) x[2]),
Sex = sub('(^[^_]+_[^_]+)_(.*
)$', '\\2', REG) ) %>%
tidyr::spread(key = variable, value = value) %>%
mutate(   L1_0.5 = round(LR(Linf, k, t0, AREF = 0.5),2)) %>%
mutate(L1 = ifelse(L1_0.5 <0, L1, L1_0.5)) %>%
select(Region, Sex, Period, sampN, Linf, k, t0, L1, L2)
cbind(sabpe, ypreds %>% group_by(cREG) %>% summarise(N = n()) %>% select(N)) %>%
select(Region, Sex, Period, N, Linf, k, t0, L1, L2)
write.csv(., file = paste0("./figures/table3_",Sys.Date(),".csv"),row.names = F)
Region = substr(REG,1,2),
Period =  sapply(strsplit(REG, "_"), function(x) x[2]),
Sex = sub('(^[^_]+_[^_]+)_(.*
)$', '\\2', REG) ) %>%
tidyr::spread(key = variable, value = value) %>%
mutate(   L1_0.5 = round(LR(Linf, k, t0, AREF = 0.5),2)) %>%
mutate(L1 = ifelse(L1_0.5 <0, L1, L1_0.5)) %>%
select(Region, Sex, Period, Linf, k, t0, L1, L2)
sabpe <- read.csv("./GAM_output/SAB_parEst_gam_2019-10-04_phase2.csv")
sabpe <- sabpe %>%
mutate(REG = as.character(REG)) %>%
select(-sd) %>%
filter(variable != 'Sigma') %>%
mutate(
Region = substr(REG,1,2),
Period =  sapply(strsplit(REG, "_"), function(x) x[2]),
Sex = sub('(^[^_]+_[^_]+)_(.*
)$', '\\2', REG) ) %>%
tidyr::spread(key = variable, value = value) %>%
mutate(   L1_0.5 = round(LR(Linf, k, t0, AREF = 0.5),2)) %>%
mutate(L1 = ifelse(L1_0.5 <0, L1, L1_0.5)) %>%
select(Region, Sex, Period, Linf, k, t0, L1, L2)
cbind(sabpe, ypreds %>% group_by(cREG) %>% summarise(N = n()) %>% select(N)) %>%
select(Region, Sex, Period, N, Linf, k, t0, L1, L2)
write.csv(., file = paste0("./figures/table3_",Sys.Date(),".csv"),row.names = F)
sabpe <- read.csv("./GAM_output/SAB_parEst_gam_2019-10-04_phase2.csv")
sabpe <- sabpe %>%
mutate(REG = as.character(REG)) %>%
select(-sd) %>%
filter(variable != 'Sigma') %>%
mutate(
Region = substr(REG,1,2),
Period =  sapply(strsplit(REG, "_"), function(x) x[2]),
Sex = sub('(^[^_]+_[^_]+)_(.*
)$', '\\2', REG) ) %>%
tidyr::spread(key = variable, value = value) %>%
mutate(   L1_0.5 = round(LR(Linf, k, t0, AREF = 0.5),2)) %>%
mutate(L1 = ifelse(L1_0.5 <0, L1, L1_0.5)) %>%
select(Region, Sex, Period, Linf, k, t0, L1, L2)
cbind(sabpe, ypreds %>% group_by(cREG) %>% summarise(N = n()) %>% select(N)) %>%
select(Region, Sex, Period, N, Linf, k, t0, L1, L2) %>%
write.csv(., file = paste0("./figures/table3_",Sys.Date(),".csv"),row.names = F)
