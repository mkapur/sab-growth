scale_fill_grey() +
scale_y_continuous(limits = c(0,1)) +
labs(x = '',y = 'Proportion Detected Accurate Breaks', fill = 'Scenario', title = 'b) Proportion Detected Accurate Breaks') +
geom_bar(stat = 'identity',width=0.5, position = position_dodge(width=0.5)) +
facet_wrap(~variable, ncol = 3)
ggarrange(plotlist = plist1, ncol=1, nrow=2, common.legend = TRUE, legend="bottom") %>%
ggsave(plot = .,  file = paste0("./figures/STARS_cdfprob_",Sys.Date(),".png"), width = 11, height = 8, units = 'in', dpi = 480)
## STARS Histogram of detected breaks----
cdf_stars <- read.csv("STARS_output/STARS_cdf_2019-06-29.csv") %>% filter(scen != 'F0L1S_R3')
ntrue <- read.csv("input_data/ntrue_a6.csv", na.strings = 'NA') %>% filter(scen != 'F0L1S_R3') %>% mutate(value = 1)
levels(cdf_stars$scen) <- levels(ntrue$scen) <- c("Scenario 2", "Scenario 4",
"Scenario 3","Scenario 1",
"Scenario 5")
plist <- list(); idx = 1
for(l in 1:length(unique(cdf_stars$scen))){
scentemp <- unique(cdf_stars$scen)[l]
# scen <- paste0(ldfprop$scen[ldfprop$scentemp == scentemp]) ## filenames
cat(l,idx,"\n")
tmp0 <- cdf_stars %>%  filter(scen == scentemp) %>% select(scen, gamLAT, gamLON, gamYR) %>% melt(id = c('scen'))
levels(tmp0$variable) <- c('Latitude','Longitude','Year')
tmp0$value <- factor(tmp0$value, levels=c(paste(1:100),NA))
tmp <- tmp0 %>%
group_by(variable, value) %>%
dplyr::summarise(n = n()) %>%
mutate(freq = n / sum(n), scen = scentemp)
## plot lat long first, then year
plist[[idx]]  <- ggplot(subset(tmp, variable != 'Year'), aes(x = value, y = freq)) +
geom_bar(stat = 'identity', col = 'skyblue') +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 6),
axis.title = element_text(size = 8),
legend.text = element_text(size = 6),
strip.text = element_text(size= 9))+
scale_y_continuous(limits = c(0,1)) +
scale_x_discrete(limits = c(paste(1:51),NA),
breaks = c(paste(seq(0,51,10)),NA)) +
geom_rect(aes(xmin = ifelse(variable != 'Year', 20,-10),
xmax = ifelse(variable != 'Year', 25,-10), ymin = 0, ymax = Inf),
fill=ifelse(l == 3,"red",NA), alpha = 1E-2) +
facet_wrap(~scen+variable,ncol = 2,drop=TRUE) +
labs( y = 'frequency', x = 'detected break location', title = '') +
geom_bar(data = subset(ntrue, scen == scentemp & variable != 'Year'),
aes(x = factor(trueb), y = value), col = 'red', stat = 'identity', alpha = 0.5)
idx <- idx +1
plist[[idx]]  <- ggplot(subset(tmp, variable == 'Year'), aes(x = value, y = freq)) +
geom_bar(stat = 'identity', col = 'skyblue') +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 6),
axis.title = element_text(size = 8),
legend.text = element_text(size = 6),
strip.text = element_text(size= 9))+
scale_y_continuous(limits = c(0,1)) +
scale_x_discrete(limits = c(paste(1:101),NA),
breaks = c(paste(seq(0,101,10)),NA)) +
geom_rect(aes(xmin = ifelse(variable != 'Year', 20,-10),
xmax = ifelse(variable != 'Year', 25,-10), ymin = 0, ymax = Inf),
fill=ifelse(l == 3,"red",NA), alpha = 1E-2) +
facet_wrap(~scen+variable,ncol = 3) +
labs( y = 'frequency', x = 'detected break location', title = '') +
geom_bar(data =  subset(ntrue, scen == scentemp & variable == 'Year'),
aes(x = factor(trueb), y = value), col = 'red', stat = 'identity', alpha = 0.5)
idx <- idx +1
}
grid.arrange(grobs = plist, ncol = 4) %>%
ggsave(plot = .,   file = paste0("./figures/STARS_hist_breaks.png"), width = 10, height = 12, units = 'in', dpi = 480)
tmp.true
tmp.par
tail(cdf)
tail(cdf_gam)
tail(cdf_prev)
tail(gam_prev)
head(cdf)
## read stuff
cdf_gam <- read.csv(paste0("GAM_output/cdf_2019-06-29.csv"))
cdfaccu_gam <- read.csv(paste0("GAM_output/cdf_accu_2019-06-29.csv"))
cdfprop_gam <- read.csv(paste0("GAM_output/cdf_prop_2019-06-29.csv"))
cdfaccu_threeq <- read.csv(paste0("GAM_output/cdf_accu_2019-06-29threequ",".csv"))
cdfaccu_half <- read.csv(paste0("GAM_output/cdf_accu_2019-06-29half",".csv"))
cdfprop_threeq <-read.csv(paste0("GAM_output/cdf_prop_2019-06-29threequ",".csv"))
cdfprop_half <-read.csv(paste0("GAM_output/cdf_prop_2019-06-29half",".csv"))
TA2 <- data.frame()
for(i in 1:length(unique(cdfaccu_gam$scen))){
TA2[i,"scen"] <- unique(cdfaccu_gam$scen)[i]
## OG values [first two cols]
tmp_accu <- subset(cdfaccu_gam, scen == unique(cdfaccu_gam$scen)[i])
tmp_prop <- subset(cdfprop_gam, scen == unique(cdfprop_gam$scen)[i])
TA2[i,"L1L2_orig"] <- paste(tmp_prop$prop, collapse = ", ")
TA2[i,"latlonyr_orig"] <- paste(tmp_accu$prop, collapse = ", ")
## Halved Sens
tmp_accu <- subset(cdfaccu_half, scen == unique(cdfaccu_half$scen)[i])
tmp_prop <- subset(cdfprop_half, scen == unique(cdfprop_half$scen)[i])
TA2[i,"L1L2_half"] <- paste(tmp_prop$prop, collapse = ", ")
TA2[i,"latlonyr_half"] <- paste(tmp_accu$prop, collapse = ", ")
## 3/4 Sens
tmp_accu <- subset(cdfaccu_threeq, scen == unique(cdfaccu_threeq$scen)[i])
tmp_prop <- subset(cdfprop_threeq, scen == unique(cdfprop_threeq$scen)[i])
TA2[i,"L1L2_3q"] <- paste(tmp_prop$prop, collapse = ", ")
TA2[i,"latlonyr_3q"] <- paste(tmp_accu$prop, collapse = ", ")
}
TA2$ORD <- c(2,4,3,1,5)
TA2[order(TA2$ORD),] %>% select(-ORD)
cdf_gam %>%
filter(L2 == FALSE) %>%
dplyr::group_by(scen) %>%
dplyr::summarise( meanL2 = mean(abs(L2_MISS)))
read.csv(paste0("GAM_output/cdf_2019-06-29threequ.csv")) %>%
filter(L2 == FALSE) %>%
dplyr::group_by(scen) %>%
dplyr::summarise( meanL2 = mean(abs(L2_MISS)))
read.csv(paste0("GAM_output/cdf_2019-06-29half.csv")) %>%
filter(L2 == FALSE) %>%
dplyr::group_by(scen) %>%
dplyr::summarise( meanL2 = mean(abs(L2_MISS)))
TA2[order(TA2$ORD),] %>% select(-ORD) %>% write.csv(paste0("figures/table_a2_",Sys.Date()-2,".csv"), row.names = F)
## "no discernable pattern in spurious breaks"
# cdf %>% filter(scen %in% c('NoBreaks','tempvar_R1R2') & (LAT == FALSE  | LON == FALSE)) %>% group_by(scen, gamLAT,gamLON) %>% dplyr::summarise(n = n())
# ## what proportion of wrong ones are only one off?
# cdf %>% filter(!(scen %in% c('NoBreaks','tempvar_R1R2')) & (LAT == FALSE  | LON == FALSE)) %>%
#   group_by(scen) %>% dplyr::summarise(n = n())
# #
cdf_gam %>% filter(scen %in% c('F0L1S_25','F0L1S_R3') & (LAT == FALSE  | LON == FALSE)) %>%
group_by(scen) %>% dplyr::summarise(n = n(),
inbounds = sum(gamLAT %in% c(24,26) |gamLON %in% c(24,26)  )) %>% mutate(inbounds/n)
cdf_prev <-  read.csv(paste0("GAM_output/preaep_0627/cdf_2019-06-10.csv"))
cdf_prev <-  read.csv(paste0("GAM_output/pre_aep_0627/cdf_2019-06-10.csv"))
head(cdf_prev)
cdf_prev %>%
filter(L2 == FALSE) %>%
dplyr::group_by(scen) %>%
dplyr::summarise( meanL2 = mean(abs(L2_MISS)))
l =1
b = 1
rm(cdf); cdf <- data.frame(); idx <-1 ## storage coverage prob totals, rbind each scen
# Fit VB and calc coverage ----
ldfprop <-  read.csv( paste0("./GAM_output/ldf_raw_a6.csv")) ## dataframe of detected breaks made aboveâ—‹
## TMB FITTING ----
scen <- unique(ldfprop$scen)[l]
tempdf <- read.csv(paste0("./IBM_output/datasets/",scen,"_",b,".csv")) #%>% filter(Age == 6)
if(scen == 'NoBreaks') tempdf$REG <- as.factor('R1')
breaksdf <- read.csv( paste0("./GAM_output/ldf_raw_a",age,".csv")) %>% filter(scen ==  unique(ldfprop$scen)[l] & boot == b)
dat<-getGR(tempdf,breaksdf);rm(tempdf)
head(dat)
## generate DES matrix of vectors and a KEY for later comparison
DES <- KEY <-  matrix(NA, ncol = 1, nrow = nrow(dat))
dat$cREG <-  paste0(dat$gamREG,"_",dat$Period)
# DES <- ifelse(!is.na(dat$gamREG), as.numeric(factor(dat$gamREG)),1)-1 ## overwrite NA for nobreaks
DES <- ifelse(!is.na(dat$cREG), as.numeric(factor(dat$cREG)),1)-1 ## overwrite NA for nobreaks
temp <- data.frame(DES = as.numeric(as.character(DES)), cREG = dat$cREG); temp <- unique(temp)
KEY <- paste(scen,DES,sep = "_")
keybase <- paste(as.factor(temp[order(temp$DES),'cREG']));rm(temp)
## run TMB parest----
nStrata <- length(unique(DES))
data <-
list(
Length_cm = dat[,"Length_cm"],
Age = dat[,"Age"],
DES = as.vector(DES),
nStrata = nStrata,
a2 = 15
)
head(cdf_Gam)
head(cdf_gam)
## generate DES matrix of vectors and a KEY for later comparison
DES <- KEY <-  matrix(NA, ncol = 1, nrow = nrow(dat))
dat$cREG <-  paste0(dat$gamREG,"_",dat$Period)
# DES <- ifelse(!is.na(dat$gamREG), as.numeric(factor(dat$gamREG)),1)-1 ## overwrite NA for nobreaks
DES <- ifelse(!is.na(dat$cREG), as.numeric(factor(dat$cREG)),1)-1 ## overwrite NA for nobreaks
KEY <- paste(scen,DES,sep = "_")
# keybase <- unique(ifelse(!is.na(dat$gamREG), as.character(dat$gamREG),"R1")) ## text regions
temp <- data.frame(DES = as.numeric(as.character(DES)), cREG = dat$cREG); temp <- unique(temp)
keybase <- paste(as.factor(temp[order(temp$DES),'cREG']));rm(temp)
## run TMB parest----
nStrata <- length(unique(DES))
data <-
list(
Length_cm = dat[,"Length_cm"],
Age = dat[,"Age"],
DES = as.vector(DES),
nStrata = nStrata,
a2 = 15
)
parameters <-
list(
log_Linf = rep(log(150), nStrata),
log_k = rep(log(0.3), nStrata),
t0 = rep(0.1, nStrata),
log_Sigma = 0
)
# Now estimate everything
map <- NULL
mod <- fitMod(data, parameters, modversion = 'sptlvb',map)
dat0 <- mod[[1]]
rep0 <- mod[[2]]
rep0
## check and save coverage ----
parms <- c('L1','L2','k','Linf')[1:2]
vars <- paste0('R',1:4,"_");   vis <- c("pooled",'early','late'); Rlevs <- c("R1", "R2","R3","R4",apply(expand.grid(vars, vis), 1, paste, collapse=""))
parms <- c('L1','L2','k','Linf')[1:2]
matchdf <- read.csv('./input_data/matchdf3.csv') %>% filter(nscen != 'F0L1S_R3')
levels(matchdf$nscen)[3] <- NA
parest <-  rep0 %>%
filter(variable %in% parms) %>%
mutate(source = 'Estimated')
parest$lwr <- parest$value - 1.96*parest$sd
parest$upr <- parest$value + 1.96*parest$sd
parest
tmp.true <- subset(matchdf, nscen == scen & guessREG == n & variable == parms[v] & guessCREG == 'pooled')
tmp.true
parest %>% filter(REG == n & variable == parms[v] & source == 'Estimated')
parms
parest
#
cdf_gam %>%
filter(L2 == FALSE) %>%
dplyr::group_by(scen) %>%
dplyr::summarise( meanL2 = mean(abs(L2_MISS)))
# cdfaccu_gam <- read.csv(paste0("GAM_output/cdf_accu_2019-05-28.csv"))
# cdfprop_gam <- read.csv(paste0("GAM_output/cdf_prop_2019-05-28.csv"))
#
# cdf_stars <- read.csv(paste0("STARS_output/STARS_cdf_",Sys.Date()-2,".csv"))
cdfaccu_stars <- read.csv(paste0("STARS_output/STARS_cdf_accu_2019-06-29.csv"))
cdfaccu_stars
cdfaccu_gam <- read.csv(paste0("GAM_output/cdf_accu_2019-06-29.csv"))
cdfaccu_gam
#
# cdf_gam %>% filter(scen == 'tempvar_R1R2' & YEAR == FALSE ) %>% group_by(gamYR) %>% dplyr::summarise(n = n())
#
#
#
# ## percent accuracy by cat
cdfaccu_stars %>% filter(scen != 'F0L1S_R3' & scen != 'F0L1S_49') %>% group_by(variable) %>%  dplyr::summarise(avg = mean(prop))
cdfaccu_gam %>% filter(scen != 'F0L1S_R3' & scen != 'F0L1S_49') %>% group_by(variable) %>%  dplyr::summarise(avg = mean(prop))
cdfprop_stars %>% filter(scen != 'F0L1S_R3' & scen != 'F0L1S_49') %>% group_by(variable) %>% dplyr::summarise(avg = mean(prop))
cdfprop_stars <- read.csv(paste0("STARS_output/STARS_cdf_prop_2019-06-29.csv"))
cdfprop_stars %>% filter(scen != 'F0L1S_R3' & scen != 'F0L1S_49') %>% group_by(variable) %>% dplyr::summarise(avg = mean(prop))
cdfprop_gam %>%  filter(scen != 'F0L1S_R3' & scen != 'F0L1S_49') %>%group_by(variable) %>%  dplyr::summarise(avg = mean(prop))
cdfprop <- read.csv(paste0('./stars_output/STARS_cdf_prop_2019-06-29.csv'))
levels(cdfprop$variable)
cdfaccu <- read.csv(paste0('./STARS_output/STARS_cdf_accu_2019-06-29.csv'))
levels(cdfaccu$variable)
# ## STARS propagg ----
cdfprop <- read.csv(paste0('./stars_output/STARS_cdf_prop_2019-06-29.csv'))
levels(cdfprop$scen) <- c("Break at 25 deg.", "Break at 48 deg.", "Overlap 20-25 deg.","No Breaks","Temporal Break Year 50")
levels(cdfprop$variable)
# cdfprop$scen  <- factor(cdfprop$scen , levels = cdfprop$scen [order(cdfprop$prop )])
levels(cdfprop$variable) <- c('Both L1 and L2','L1','L2')
cdfprop2 <- cdfprop %>% filter(!(variable %in% c('Both L1 and L2'))& scen != "20% Higher k, Break at 25 deg.")
# cdfprop$variable <- factor(cdfprop$variable, levels=c('L1','L2','Both L1 and L2'))
plist1 <- list()
plist1[[1]] <- ggplot(cdfprop2, aes(x = scen, y = prop, fill = scen)) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_blank(),
legend.position = c(0.6,0.9)) +
scale_fill_grey() +
scale_y_continuous(limits = c(0,1)) +
labs(x = '',y = 'Coverage Probability', fill = 'Scenario',
title = 'a) Coverage Probability for Endpoints of Growth Curve') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.7)) +
facet_wrap(~variable)
cdfaccu <- read.csv(paste0('./STARS_output/STARS_cdf_accu_2019-06-29.csv'))
levels(cdfaccu$scen) <- c("Break at 25 deg.", "Break at 48 deg.", "Overlap 20-25 deg.","No Breaks","Temporal Break Year 50")
levels(cdfaccu$variable)
# cdfprop$scen  <- factor(cdfprop$scen , levels = cdfprop$scen [order(cdfprop$prop )])
levels(cdfaccu$variable) <- c('Latitude', 'Longitude' ,'Year')
cdfaccu$variable <- factor(cdfaccu$variable, levels=c('L1','L2','Both L1 and L2'))
cdfaccu2 <- cdfaccu %>% filter(!(variable %in% c('Lat, Long and Year','Both Latitude and Longitude'))& scen != "20% Higher k, Break at 25 deg.")
# cdfaccu$scen  <- factor(cdfaccu$scen , levels = cdfaccu$scen [order(cdfprop$prop  )])
plist1[[2]] <- ggplot(cdfaccu2, aes(x = scen, y = prop, fill = scen)) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_blank(),
legend.position = 'none') +
# scale_fill_viridis_d()+
scale_fill_grey() +
scale_y_continuous(limits = c(0,1)) +
labs(x = '',y = 'Proportion Detected Accurate Breaks', fill = 'Scenario', title = 'b) Proportion Detected Accurate Breaks') +
geom_bar(stat = 'identity',width=0.5, position = position_dodge(width=0.5)) +
facet_wrap(~variable, ncol = 3)
ggarrange(plotlist = plist1, ncol=1, nrow=2, common.legend = TRUE, legend="bottom") %>%
ggsave(plot = .,  file = paste0("./figures/STARS_cdfprob_",Sys.Date(),".png"), width = 11, height = 8, units = 'in', dpi = 480)
plist1[[2]]
cdfaccu <- read.csv(paste0('./STARS_output/STARS_cdf_accu_2019-06-29.csv'))
levels(cdfaccu$scen)
levels(cdfaccu$scen) <- c("Break at 25 deg.", "Break at 48 deg.", "Overlap 20-25 deg.","No Breaks","Temporal Break Year 50")
# cdfprop$scen  <- factor(cdfprop$scen , levels = cdfprop$scen [order(cdfprop$prop )])
levels(cdfaccu$variable) <- c('Latitude', 'Longitude' ,'Year')
cdfaccu$variable <- factor(cdfaccu$variable, levels=c('L1','L2','Both L1 and L2'))
cdfaccu2 <- cdfaccu %>% filter(!(variable %in% c('Lat, Long and Year','Both Latitude and Longitude'))& scen != "20% Higher k, Break at 25 deg.")
cdfaccu2
cdfaccu
levels(cdfaccu$variable)
cdfaccu <- read.csv(paste0('./STARS_output/STARS_cdf_accu_2019-06-29.csv'))
levels(cdfaccu$scen) <- c("Break at 25 deg.", "Break at 48 deg.", "Overlap 20-25 deg.","No Breaks","Temporal Break Year 50")
# cdfprop$scen  <- factor(cdfprop$scen , levels = cdfprop$scen [order(cdfprop$prop )])
levels(cdfaccu$variable) <- c('Latitude', 'Longitude' ,'Year')
cdfaccu$variable <- factor(cdfaccu$variable, levels=c('L1','L2','Both L1 and L2'))
cdfaccu$variable
cdfaccu <- read.csv(paste0('./STARS_output/STARS_cdf_accu_2019-06-29.csv'))
levels(cdfaccu$scen) <- c("Break at 25 deg.", "Break at 48 deg.", "Overlap 20-25 deg.","No Breaks","Temporal Break Year 50")
# cdfprop$scen  <- factor(cdfprop$scen , levels = cdfprop$scen [order(cdfprop$prop )])
levels(cdfaccu$variable) <- c('Latitude', 'Longitude' ,'Year')
cdfaccu2 <- cdfaccu %>% filter(!(variable %in% c('Lat, Long and Year','Both Latitude and Longitude'))
& scen != "20% Higher k, Break at 25 deg.")
# cdfaccu$scen  <- factor(cdfaccu$scen , levels = cdfaccu$scen [order(cdfprop$prop  )])
plist1[[2]] <- ggplot(cdfaccu2, aes(x = scen, y = prop, fill = scen)) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_blank(),
legend.position = 'none') +
# scale_fill_viridis_d()+
scale_fill_grey() +
scale_y_continuous(limits = c(0,1)) +
labs(x = '',y = 'Proportion Detected Accurate Breaks', fill = 'Scenario', title = 'b) Proportion Detected Accurate Breaks') +
geom_bar(stat = 'identity',width=0.5, position = position_dodge(width=0.5)) +
facet_wrap(~variable, ncol = 3)
ggarrange(plotlist = plist1, ncol=1, nrow=2, common.legend = TRUE, legend="bottom") %>%
ggsave(plot = .,  file = paste0("./figures/STARS_cdfprob_",Sys.Date(),".png"), width = 11, height = 8, units = 'in', dpi = 480)
cdfprop_stars %>% filter(scen != 'F0L1S_R3' & scen != 'F0L1S_49') %>% group_by(variable) %>% dplyr::summarise(avg = mean(prop))
cdfprop_gam %>%  filter(scen != 'F0L1S_R3' & scen != 'F0L1S_49') %>%group_by(variable) %>%  dplyr::summarise(avg = mean(prop))
cdfaccu <- read.csv(paste0('./gam_output/cdf_accu_2019-06-29.csv'))
## GAM propagg----
cdfprop <- read.csv(paste0('./gam_output/cdf_prop_2019-06-29.csv'))
levels(cdfprop$scen) <- c("Break at 25 deg.", "Break at 48 deg.", "Overlap 20-25 deg.","No Breaks","Temporal Break Year 50")
levels(cdfprop$variable)
# cdfprop$scen  <- factor(cdfprop$scen , levels = cdfprop$scen [order(cdfprop$prop )])
levels(cdfprop$variable) <- c('L1','L2' )
cdfprop2 <- cdfprop %>% filter(!(variable %in% c('Both L1 and L2')) &
scen != "20% Higher k, Break at 25 deg.")
ggplot(cdfprop2, aes(x = scen, y = prop, fill = scen)) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_blank(),
legend.position = c(0.6,0.9)) +
scale_fill_viridis_d()+
scale_y_continuous(limits = c(0,1)) +
labs(x = '',y = 'Coverage Probability', fill = 'Scenario',
title = 'a) Coverage Probability for Endpoints of Growth Curve') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.7)) +
facet_wrap(~variable)
cdfprop2
cdfprop_gam %>%  filter(scen != 'F0L1S_R3' & scen != 'F0L1S_49') %>%group_by(variable) %>%  dplyr::summarise(avg = mean(prop))
cdfprop_stars %>% filter(scen != 'F0L1S_R3' & scen != 'F0L1S_49') %>% group_by(variable) %>% dplyr::summarise(avg = mean(prop))
# Fit VB and calc coverage ----
ldfprop <-  read.csv( paste0("./GAM_output/ldf_raw_a6.csv")) ## dataframe of detected breaks made aboveâ—‹
rm(cdf); cdf <- data.frame(); idx <-1 ## storage coverage prob totals, rbind each scen
for(l in 1:length(unique(ldfprop$scen))){
# for(b in sample(1:nboot,5)){
for(b in 1:nboot){
## TMB FITTING ----
scen <- unique(ldfprop$scen)[l]
tempdf <- read.csv(paste0("./IBM_output/datasets/",scen,"_",b,".csv")) #%>% filter(Age == 6)
if(scen == 'NoBreaks') tempdf$REG <- as.factor('R1')
breaksdf <- read.csv( paste0("./GAM_output/ldf_raw_a",age,".csv")) %>% filter(scen ==  unique(ldfprop$scen)[l] & boot == b)
dat<-getGR(tempdf,breaksdf);rm(tempdf)
## generate DES matrix of vectors and a KEY for later comparison
DES <- KEY <-  matrix(NA, ncol = 1, nrow = nrow(dat))
dat$cREG <-  paste0(dat$gamREG,"_",dat$Period)
# DES <- ifelse(!is.na(dat$gamREG), as.numeric(factor(dat$gamREG)),1)-1 ## overwrite NA for nobreaks
DES <- ifelse(!is.na(dat$cREG), as.numeric(factor(dat$cREG)),1)-1 ## overwrite NA for nobreaks
KEY <- paste(scen,DES,sep = "_")
# keybase <- unique(ifelse(!is.na(dat$gamREG), as.character(dat$gamREG),"R1")) ## text regions
temp <- data.frame(DES = as.numeric(as.character(DES)), cREG = dat$cREG); temp <- unique(temp)
keybase <- paste(as.factor(temp[order(temp$DES),'cREG']));rm(temp)
## run TMB parest----
nStrata <- length(unique(DES))
data <-
list(
Length_cm = dat[,"Length_cm"],
Age = dat[,"Age"],
DES = as.vector(DES),
nStrata = nStrata,
a2 = 15
)
parameters <-
list(
log_Linf = rep(log(150), nStrata),
log_k = rep(log(0.3), nStrata),
t0 = rep(0.1, nStrata),
log_Sigma = 0
)
# Now estimate everything
map <- NULL
mod <- fitMod(data, parameters, modversion = 'sptlvb',map)
dat0 <- mod[[1]]
rep0 <- mod[[2]]
## reformat outputs ----
write.csv(rep0, file = paste0("./output_data/",scen,"_parEst_gam_",b,"_",Sys.Date(),'.csv'),row.names = F)
ypreds0 <- data.frame(dat0); names(ypreds0)[1] <- c('Predicted')
write.csv(ypreds0,  paste0("./output_data/",scen,"_predicts_",b,Sys.Date(),".csv"),row.names = F)
cat("Fit TMB model ",paste(scen)," GAM boot ",b," & saved outputs \n")
## check and save coverage ----
parms <- c('L1','L2','k','Linf')[1:2]
vars <- paste0('R',1:4,"_");   vis <- c("pooled",'early','late'); Rlevs <- c("R1", "R2","R3","R4",apply(expand.grid(vars, vis), 1, paste, collapse=""))
source("./functions/compareBreaks2.R")
cat("Tabulated Breaks ",paste(scen)," GAM boot ",b," CDF row ",idx," \n")
} ## end boots
} ## end ldfrows
cdf %>%
select(scen, LAT, LON, YEAR) %>%
# mutate(both = (LAT == T & LON == T), all = (both == T & YEAR == T)) %>%
melt(id = c('scen')) %>%
group_by(scen,variable) %>%
dplyr::summarise(denom = n(), n = sum(value)) %>%
mutate(prop = round(n/denom,2)) %>%
mutate(method = "GAM")
cdf %>%
filter(!is.na(scen) & !is.na(L2))  %>%
select(scen, L1, L2) %>%
# mutate(both = (L1 == T & L2 == T)) %>%
melt(id = c('scen')) %>%
group_by(scen,variable) %>%
dplyr::summarise(denom = n(), n = sum(value)) %>%
mutate(prop = round(n/denom,2))%>%
mutate(method = "GAM")
cdfprop
cdfaccu_gam %>% filter(scen != 'F0L1S_R3' & scen != 'F0L1S_49') %>% group_by(variable) %>%  dplyr::summarise(avg = mean(prop))
cdfaccu_gam
cdfprop_gam %>%  filter(scen != 'F0L1S_R3' & scen != 'F0L1S_49') %>%group_by(variable) %>%  dplyr::summarise(avg = mean(prop))
cdfaccu_gam
cdfprop_gam
cdf_gam %>%
filter(scen == 'F0L1S_49' & (LON == FALSE | LAT == FALSE)) %>%
group_by(gamLAT,gamLON) %>% dplyr::summarise(n=n())
## many false edges were nearby
cdf_gam %>%
filter(scen == 'F0L1S_49' & LON %in% c(47,49)) %>%
group_by(gamLON) %>% dplyr::summarise(n=n())
cdf_gam %>%
filter(scen == 'F0L1S_49' & LON %in% c(47,49))
## many false edges were nearby
cdf_gam %>%
filter(scen == 'F0L1S_49' & gamLON %in% c(47,49)) %>%
group_by(gamLON) %>% dplyr::summarise(n=n())
## many false edges were nearby
cdf_gam %>%
filter(scen == 'F0L1S_49' & LON == FALSE) %>%
group_by(gamLON) %>% dplyr::summarise(n=n())
cdfaccu_gam
cdfprop_gam
cdf_gam %>% filter(scen == 'tempvar_R1R2' & YEAR == FALSE & gamYR %in% c(49,51)) %>% group_by(gamYR) %>% dplyr::summarise(n = n())
cdf_gam %>% filter(scen == 'tempvar_R1R2' & YEAR == FALSE ) %>% group_by(gamYR) %>% dplyr::summarise(n = n())
12+88+44
144/148
88+44
132/148
cdf_gam %>% filter(scen == 'tempvar_R1R2' & gamYR %in% c(49,50,51)) %>% group_by(gamYR) %>% dplyr::summarise(n = n())
cdf_gam
cdf_gam %>% filter(scen == 'tempvar_R1R2') %>% nrow(.)
cdf_gam %>% filter(scen == 'tempvar_R1R2' & gamYR %in% c(49,50,51)) %>% group_by(gamYR) %>% dplyr::summarise(n = n())
88+248+44
380/396
cdfprop_stars %>% filter(scen != 'F0L1S_R3' & scen != 'F0L1S_49') %>% group_by(variable) %>% dplyr::summarise(avg = mean(prop))
#
cdf_gam %>%
filter(L2 == FALSE) %>%
dplyr::group_by(scen) %>%
dplyr::summarise( meanL2 = mean(abs(L2_MISS)))
head(cdf_gam)
#
cdf_gam %>%
filter(L2 == FALSE & YEAR == FALSE) %>%
dplyr::group_by(scen) %>%
dplyr::summarise( meanL2 = mean(abs(L2_MISS)))
#
cdf_gam %>%
filter(L2 == FALSE) %>%
dplyr::group_by(scen, YEAR) %>%
dplyr::summarise( meanL2 = mean(abs(L2_MISS)))
#
cdf_gam %>%
filter(L2 == FALSE) %>%
dplyr::group_by(scen, YEAR) %>%
dplyr::summarise( meanL2 = mean(abs(L2_MISS))) %>%
write.csv(., './figures/tableAX.csv', row.names =F)
#
cdf_gam %>%
filter(L1 == FALSE) %>%
dplyr::group_by(scen) %>%
dplyr::summarise( meanL1 = mean(abs(L1_MISS)))
#
cdf_gam %>%
filter(L2 == FALSE) %>%
dplyr::group_by(scen) %>%
# dplyr::group_by(scen, YEAR) %>%
dplyr::summarise( meanL2 = mean(abs(L2_MISS))) #%>%
read.csv(paste0("GAM_output/cdf_2019-06-29half.csv")) %>%
filter(L2 == FALSE) %>%
dplyr::group_by(scen) %>%
dplyr::summarise( meanL2 = mean(abs(L2_MISS)))
cdfprop_gam
cdfaccu_gam
cdfaccu_stars
read.csv(paste0("GAM_output/cdf_2019-06-29threequ.csv")) %>%
filter(L2 == FALSE) %>%
dplyr::group_by(scen, YEAR) %>%
dplyr::summarise( meanL2 = mean(abs(L2_MISS)))
read.csv(paste0("GAM_output/cdf_2019-06-29half.csv")) %>%
filter(L2 == FALSE) %>%
dplyr::group_by(scen,YEAR) %>%
dplyr::summarise( meanL2 = mean(abs(L2_MISS)))
read.csv(paste0("GAM_output/cdf_2019-06-29threequ.csv")) %>%
filter(L2 == FALSE) %>%
dplyr::group_by(scen) %>%
dplyr::summarise( meanL2 = mean(abs(L2_MISS)))
read.csv(paste0("GAM_output/cdf_2019-06-29half.csv")) %>%
filter(L2 == FALSE) %>%
dplyr::group_by(scen) %>%
dplyr::summarise( meanL2 = mean(abs(L2_MISS)))
parest
