for (k in 1:3)  fit <- nlminb(model$env$last.par.best, model$fn, model$gr,  control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
fit$par
model$report()
fit$objective
deriso_stan <- tmbstan(model)
samp <- extract(deriso_stan) ## run using tmbstan
par(mfrow = c(1,3))
hist(samp$K)
hist(samp$h)
hist(samp$Ft)
par(mfrow = c(1,1))
## Get out depletion time series to plot later
tempd <- as.matrix(deriso_stan,pars = c("K","Ft","h"))
postrep <- apply(X = tempd, MARGIN = 1, FUN = model$report) ## get report file
depts <- data.frame(B = rep(NA,31))
for(i in 1:length(postrep)){
depts[,i] <- data.frame(postrep[[i]][3])/tempd[i,"K"]
}
depts <- apply(depts,1,FUN = median)
compile("shfr.cpp")
dyn.load(dynlib("shfr"))
parameters <-  list(log_r = -1.2, K = 1000,  Ft = rep(-2, (length(cdat$year))))
lowbnd = c( -10, 500, rep(-20,(length(cdat$year))))
uppbnd = c(  0, 1500,  rep(-0.01,(length(cdat$year))))
# compile("schaefer.cpp")
# dyn.load(dynlib("schaefer"))
compile("shfr.cpp")
dyn.load(dynlib("shfr"))
parameters <-  list(log_r = -1.2, K = 1000,  Ft = rep(-2, (length(cdat$year))))
lowbnd = c( -10, 500, rep(-20,(length(cdat$year))))
uppbnd = c(  0, 1500,  rep(-0.01,(length(cdat$year))))
data <- list(year = cdat$year, catchobs = cdat$catch, abundobs = adat$abundance, abundse= adat$se, abundyrs = adat$year)
# model <- MakeADFun(data, parameters,  DLL="schaefer",silent=T)
model <- MakeADFun(data, parameters,  DLL="shfr",silent=T)
# model$fn()
# model$report()
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
compile("deriso.cpp")
K = 1000
Type rho = 0.995
dyn.load(dynlib("deriso"))
Type w = 0.5
data <- list(year = cdat$year, catchobs = cdat$catch, abundobs = adat$abundance, abundse= adat$se, abundyrs = adat$year, consC = 1, task = 1)
M = 0.2
w = 0.5
rho = 0.995
K =1000
s = exp(-M)
K*(1-s-rho*s+rho*exp(-2*M))/(1-rho*w*s)
data <- list(year = cdat$year, catchobs = cdat$catch, abundobs = adat$abundance, abundse= adat$se, abundyrs = adat$year, consC = 1, task = 1)
parameters <-  list( K = 1000, h = 0.5, Ft = (rep(-2, length(cdat$year)-1)))
lowbnd = c(500, 0, rep(-20,(length(cdat$year)-1)))
uppbnd = c(1500,  1,  rep(-0.01,(length(cdat$year)-1)))
model <- MakeADFun(data, parameters,  DLL="deriso",silent=T)
model$report()
# model$fn()
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
model$report()
compile("deriso.cpp")
dyn.load(dynlib("deriso"))
compile("deriso.cpp")
dyn.load(dynlib("deriso"))
rm(list = ls())
options(scipen = 0)
require(ggplot2, quietly = T)
require(TMB, quietly = T)
require(reshape)
require(dplyr, quietly = T)
require(rstan)
require(tmbstan)
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
setwd("~/GitHub/FISH-559/Home4")
cdat <- read.csv("HWK4.csv")[1:30,1:2]
adat <- read.csv("HWK4.csv")[32:37,1:3]
names(cdat) <- c('year','catch')
names(adat) <- c('year','abundance','se')
cdat$catch <- as.numeric(as.character(cdat$catch))
adat$abundance <- as.numeric(as.character(adat$abundance))
adat$se <- as.numeric(as.character(adat$se))
head(adat); head(cdat)
compile("deriso.cpp")
dyn.load(dynlib("deriso"))
data <- list(year = cdat$year, catchobs = cdat$catch, abundobs = adat$abundance, abundse= adat$se, abundyrs = adat$year, consC = 1, task = 1)
parameters <-  list( K = 1000, h = 0.5, Ft = (rep(-2, length(cdat$year)-1)))
lowbnd = c(500, 0, rep(-20,(length(cdat$year)-1)))
uppbnd = c(1500,  1,  rep(-0.01,(length(cdat$year)-1)))
model <- MakeADFun(data, parameters,  DLL="deriso",silent=T)
model$report()
# model$fn()
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
for (k in 1:3)  fit <- nlminb(model$env$last.par.best, model$fn, model$gr,  control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
fit$par
model$report()
fit$objective
compile("schaefer.cpp")
dyn.load(dynlib("schaefer"))
# compile("shfr.cpp")
# dyn.load(dynlib("shfr"))
parameters <-  list(log_r = -1.2, K = 1000,  Ft = rep(-2, (length(cdat$year))))
lowbnd = c( -10, 500, rep(-20,(length(cdat$year))))
uppbnd = c(  0, 1500,  rep(-0.01,(length(cdat$year))))
data <- list(year = cdat$year, catchobs = cdat$catch, abundobs = adat$abundance, abundse= adat$se, abundyrs = adat$year)
model <- MakeADFun(data, parameters,  DLL="schaefer",silent=T)
# model <- MakeADFun(data, parameters,  DLL="shfr",silent=T)
# model$fn()
# model$report()
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
# compile("schaefer.cpp")
# dyn.load(dynlib("schaefer"))
compile("shfr.cpp")
dyn.load(dynlib("shfr"))
parameters <-  list(log_r = -1.2, K = 1000,  Ft = rep(-2, (length(cdat$year))))
lowbnd = c( -10, 500, rep(-20,(length(cdat$year))))
uppbnd = c(  0, 1500,  rep(-0.01,(length(cdat$year))))
data <- list(year = cdat$year, catchobs = cdat$catch, abundobs = adat$abundance, abundse= adat$se, abundyrs = adat$year)
# model <- MakeADFun(data, parameters,  DLL="schaefer",silent=T)
model <- MakeADFun(data, parameters,  DLL="shfr",silent=T)
# model$fn()
# model$report()
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
# https://www.fromthebottomoftheheap.net/2014/05/15/identifying-periods-of-change-with-gams/
require(mgcv); require(dplyr); require(reshape); require(RColorBrewer); require(ggplot2)
library(ggsidekick)
## load and cbind data
setwd("C:/Users/mkapur/Dropbox/UW/sab-growth")
## WEST COAST ----
load(paste0(getwd(), "/data/raw/WC/Bio__NWFSC.Combo_2018-09-25.rda"), verbose = T) ## loads as "Data"
wcsurv0 <- Data; rm(Data)
wcsurv1 <- wcsurv0 %>% filter(!is.na(Age) & !is.na(Length_cm) & Depth_m < 549 & Depth_m >= 55 & Sex != 'U')
wcsurv <- wcsurv1 %>%
select(Year, Length_cm, Age, Sex, Latitude_dd, Longitude_dd) %>%   mutate(REG = "WC")
rm(wcsurv0); rm(wcsurv1)
## British Columbia ----
## still need lats and longs here
bcsurv <- read.csv(paste0(getwd(),"/data/raw/BC/BC_LWMSO_1970-present.csv")) %>%
filter(!is.na(SPECIMEN_AGE) & !is.na(Fork_Length) & SPECIMEN_SEX_CODE %in% c("1","2") & NS_AREA != "" & SABLE_AREA_GROUP != "") %>%
select(SPECIMEN_AGE, Fork_Length,SPECIMEN_SEX_CODE,YEAR) %>%
mutate(Latitude_dd = NA, Longitude_dd = NA,Sex = ifelse(SPECIMEN_SEX_CODE == "2", 'F', "M"), Fork_Length = Fork_Length/10) %>%
plyr::rename(c("SPECIMEN_AGE" = "Age","Fork_Length" = "Length_cm","YEAR" = "Year")) %>%
select(Year, Length_cm, Age, Sex, Latitude_dd, Longitude_dd) %>%
mutate(REG = "BC")
rm(list = ls())
## combine ---
# all_data <- rbind(wcsurv,bcsurv,aksurv)
# save(all_data, file = paste0(getwd(),"/data/gam_data.rda"))
load( paste0(getwd(),"/data/gam_data.rda")) ## all_data
## load and cbind data
setwd("C:/Users/mkapur/Dropbox/UW/sab-growth")
require(mgcv); require(dplyr); require(reshape); require(RColorBrewer); require(ggplot2)
library(ggsidekick)
# all_data$Year <- as.factor(all_data$Year)
all_data$Year <- as.numeric(as.character(all_data$Year))
all_data$Sex <- as.factor(all_data$Sex)
## combine ---
# all_data <- rbind(wcsurv,bcsurv,aksurv)
# save(all_data, file = paste0(getwd(),"/data/gam_data.rda"))
load( paste0(getwd(),"/data/gam_data.rda")) ## all_data
## WEST COAST ----
load(paste0(getwd(), "/data/raw/WC/Bio__NWFSC.Combo_2018-09-25.rda"), verbose = T) ## loads as "Data"
wcsurv0 <- Data; rm(Data)
wcsurv1 <- wcsurv0 %>% filter(!is.na(Age) & !is.na(Length_cm) & Depth_m < 549 & Depth_m >= 55 & Sex != 'U')
wcsurv <- wcsurv1 %>%
select(Year, Length_cm, Age, Sex, Latitude_dd, Longitude_dd) %>%   mutate(REG = "WC")
rm(wcsurv0); rm(wcsurv1)
## British Columbia ----
## still need lats and longs here
bcsurv <- read.csv(paste0(getwd(),"/data/raw/BC/BC_LWMSO_1970-present.csv")) %>%
filter(!is.na(SPECIMEN_AGE) & !is.na(Fork_Length) & SPECIMEN_SEX_CODE %in% c("1","2") & NS_AREA != "" & SABLE_AREA_GROUP != "") %>%
select(SPECIMEN_AGE, Fork_Length,SPECIMEN_SEX_CODE,YEAR) %>%
mutate(Latitude_dd = NA, Longitude_dd = NA,Sex = ifelse(SPECIMEN_SEX_CODE == "2", 'F', "M"), Fork_Length = Fork_Length/10) %>%
plyr::rename(c("SPECIMEN_AGE" = "Age","Fork_Length" = "Length_cm","YEAR" = "Year")) %>%
select(Year, Length_cm, Age, Sex, Latitude_dd, Longitude_dd) %>%
mutate(REG = "BC")
# ## ALASKA ----
aksurv <- read.csv(paste0(getwd(),"/data/raw/ak/AK_age_view_2018.csv")) %>%
## drop period before 1995 and filter for top 6 as in Echave
filter(., grepl(paste0(c("Southeast",'Kodiak',"Chirikof","Shumagin","Bering","Aleutian"), collapse="|"), GEOGRAPHIC_AREA_NAME)) %>%
filter(SEX != 3 & !is.na(AGE) & !is.na(LENGTH) & YEAR > 1995) %>%
mutate(SEX = ifelse(SEX == 2, 'F', "M")) %>%
select(YEAR, LENGTH, AGE, SEX, STARTLAT, STARTLONG) %>%
plyr::rename(c('YEAR' = 'Year', 'SEX' = 'Sex','AGE' = 'Age',
'LENGTH' = 'Length_cm', "STARTLAT" = "Latitude_dd","STARTLONG" = "Longitude_dd")) %>%
mutate(REG = "AK")
## combine ---
all_data <- rbind(wcsurv,bcsurv,aksurv)
save(all_data, file = paste0(getwd(),"/data/gam_data.rda"))
# all_data$Year <- as.factor(all_data$Year)
all_data$Year <- as.numeric(as.character(all_data$Year))
all_data$Sex <- as.factor(all_data$Sex)
mod <- gam(Length_cm ~ Age + Sex + s(Year, bs = "cc") + s(Latitude_dd,Longitude_dd),
data = all_data0)
## change point gam in par est
all_data0 <- subset(all_data, REG != 'BC')
mod <- gam(Length_cm ~ Age + Sex + s(Year, bs = "cc") + s(Latitude_dd,Longitude_dd),
data = all_data0)
## now try with some AR structures and check AIC
## 11am start
mod1 <- gam(Length_cm ~ Age + Sex + s(Year, bs = "cc") + s(Latitude_dd,Longitude_dd),
correlation = corARMA(form = ~ 1|Year, p = 1),
data = all_data0)
mod2 <- gam(Length_cm ~ Age + Sex + s(Year, bs = "cc") + s(Latitude_dd,Longitude_dd),
correlation = corARMA(form = ~ 1|Year, p = 2),
data = all_data0)
anova(mod,mod1,mod2,mod3$lme)
mod3 <- gam(Length_cm ~ Age + Sex + s(Year, bs = "cc") + s(Latitude_dd,Longitude_dd),
correlation = corARMA(form = ~ 1|Year, p = 3),
data = all_data0)
anova(mod,mod1,mod2,mod3)
str(mod)
## now try with some AR structures and check AIC
## 11am start
mod1 <- gam(Length_cm ~ Age + Sex + s(Latitude_dd,Longitude_dd),
correlation = corAR1(form = ~ 1|Year, p = 1),
data = all_data0)
acf(resid(mod), lag.max = 36, main = "ACF")
acf(all_data$Length_cm)
acf(all_data)
acf(all_data0)
hist(log(all_data$Length_cm))
hist(all_data$Length_cm)
summary(mod)
plot(mod)
plot(mod,  select  =1,  scheme  =2,  lwd  =2,  labcex  =  0.8)
plot(mod,  select  =1,  scheme  =2,  lwd  =2)
plot(mod,  select  =2,  scheme  =2,  lwd  =2)
plot(mod$gam, scale = 0)
layout(matrix(1:2, ncol = 2))
plot(mod,  select  =1,  scheme  =2,  lwd  =2)
plot(mod,  select  =2,  scheme  =2,  lwd  =2
)
acf(resid(mod),  main = "ACF")
acf(mod)
acf(all_data$Length_cm)
length(unique(all_data$Year))
## first fit with year only and check ACF
mod <- gam(Length_cm ~ s(Year, bs = "cc"), data = all_data0)
acf(resid(mod),  main = "ACF")
mod <- lm(Length_cm ~ Year, data = all_data0)
acf(resid(mod),  main = "ACF")
class(all_data$Year)
# ## ALASKA ----
aksurv <- read.csv(paste0(getwd(),"/data/raw/ak/AK_age_view_2018.csv")) %>%
## drop period before 1995 and filter for top 6 as in Echave
filter(., grepl(paste0(c("Southeast",'Kodiak',"Chirikof","Shumagin","Bering","Aleutian"), collapse="|"), GEOGRAPHIC_AREA_NAME)) %>%
filter(SEX != 3 & !is.na(AGE) & !is.na(LENGTH) ) %>%
mutate(SEX = ifelse(SEX == 2, 'F', "M")) %>%
select(YEAR, LENGTH, AGE, SEX, STARTLAT, STARTLONG) %>%
plyr::rename(c('YEAR' = 'Year', 'SEX' = 'Sex','AGE' = 'Age',
'LENGTH' = 'Length_cm', "STARTLAT" = "Latitude_dd","STARTLONG" = "Longitude_dd")) %>%
mutate(REG = "AK")
## combine ---
all_data <- rbind(wcsurv,bcsurv,aksurv)
save(all_data, file = paste0(getwd(),"/data/gam_data.rda"))
# save(all_data, file = paste0(getwd(),"/data/gam_data.rda"))
load( paste0(getwd(),"/data/gam_data.rda")) ## all_data
# all_data$Year <- as.factor(all_data$Year)
all_data$Year <- as.numeric(as.character(all_data$Year))
all_data$Sex <- as.factor(all_data$Sex)
all_data0 <- subset(all_data, REG != 'BC')
mod <- lm(Length_cm ~ Year, data = all_data0)
acf(resid(mod),  main = "ACF")
unique(all_data$Year)
acf_resid(mod)
?acf_esid
?acf_resid
## first fit with year only and check ACF
mod <- gam(Length_cm ~ s(Year, bs = "cc"), data = all_data0)
# mod <- lm(Length_cm ~ Year, data = all_data0)
acf(resid(mod),  main = "ACF")
## 11am start
mod1 <- gam(Length_cm ~ Age + Sex + s(Latitude_dd,Longitude_dd),
correlation = corAR1(form = ~ 1|Year, p = 1),
data = all_data0)
mod2 <- gam(Length_cm ~ Age + Sex + s(Year, bs = "cc") + s(Latitude_dd,Longitude_dd),
correlation = corARMA(form = ~ 1|Year, p = 2),
data = all_data0)
mod3 <- gam(Length_cm ~ Age + Sex + s(Year, bs = "cc") + s(Latitude_dd,Longitude_dd),
correlation = corARMA(form = ~ 1|Year, p = 3),
data = all_data0)
anova(mod,mod1,mod2,mod3)
model.sel(mod)
?model.sel
??model.sel
require(MuMIn)
model.sel(mod)
model.sel(mod,mod1,mod2,mod3)
res <- resid(mod2, type = "normalized")
res <- resid(mod2, type = "normalized")
res <- resid(mod2, type = "pearson")
acf(res, main = "ACF - AR(2) errors")
pacf(res, main = "pACF- AR(2) errors")
res <- resid(mod2, type = "deviance")
acf(res, main = "ACF - AR(2) errors")
mod2 <- gam(Length_cm ~ Age + Sex + s(Year, bs = "cc") + s(Latitude_dd,Longitude_dd),
correlation = corAR1(form = ~ 1|Year, p = 2),
data = all_data0)
mod3 <- gam(Length_cm ~ Age + Sex + s(Year, bs = "cc") + s(Latitude_dd,Longitude_dd),
correlation = corAR1(form = ~ 1|Year, p = 3),
data = all_data0)
MuMIn::model.sel(mod,mod1,mod2,mod3)
layout(matrix(1:2, ncol = 2))
res <- resid(mod2, type = "deviance")
acf(res, main = "ACF - AR(2) errors")
pacf(res, main = "pACF- AR(2) errors")
layout(1)
## calc first derivatives
## ID breakpoints
## segregate data at breakpoints and fit VonB model using TMB or NLS
gam.check(mod2)
## calc first derivatives
## ID breakpoints
## segregate data at breakpoints and fit VonB model using TMB or NLS
layout(matrix(1:4, ncol = 2))
gam.check(mod2)
plot(mod2,  select  =1,  scheme  =2,  lwd  =2)
plot(mod2,  select  =2,  scheme  =2,  lwd  =2)
layout(matrix(1:2, ncol = 2))
plot(mod2,  select  =1,  scheme  =2,  lwd  =2)
plot(mod2,  select  =2,  scheme  =2,  lwd  =2)
plot(mod,  select  =2,  scheme  =2,  lwd  =2)
plot(mod,  select  =2,  scheme  =2,  lwd  =2)
plot(mod,  select  =2,  scheme  =2,  lwd  =2)
graphics.off()
plot(mod,  select  =2,  scheme  =2,  lwd  =2)
plot(mod,  select  =2,  scheme  =2,  lwd  =2)
plot(mod2,  select  =1,  scheme  =2,  lwd  =2)
plot(mod2,  select  =2,  scheme  =2,  lwd  =2)
plot(mod,  select  =2,  scheme  =2,  lwd  =2)
mod <- gam(Length_cm ~ Age + Sex + s(Year, bs = "cc") + s(Latitude_dd,Longitude_dd),
data = all_data0)
plot(mod,  select  =2,  scheme  =2,  lwd  =2)
## now try with some AR structures and check AIC
## 11am start
mod1 <- gam(Length_cm ~ Age + Sex + s(Longitude_dd,Latitude_dd),
correlation = corAR1(form = ~ 1|Year, p = 1),
data = all_data0)
plot(mod1,  select  =2,  scheme  =2,  lwd  =2)
plot(mod1,  select  =2,  scheme  =2,  lwd  =2)
mod2 <- gam(Length_cm ~ Age + Sex + s(Year, bs = "cc") +
s(Longitude_dd,Latitude_dd),
correlation = corAR1(form = ~ 1|Year, p = 2),
data = all_data0)
plot(mod2,  select  =1,  scheme  =2,  lwd  =2)
plot(mod2,  select  =2,  scheme  =2,  lwd  =2)
subset(all_data0, longtitude_dd >125)
subset(all_data0, Longtitude_dd >125)
subset(all_data0, Longitude_dd >125)
all_data0$Longitude_dd <- with(all_data0, ifelse(Longitude_dd> 0, -1*Longitude_dd))
all_data0$Longitude_dd <- with(all_data0, ifelse(Longitude_dd> 0, -1*Longitude_dd,Longitude_dd))
## first fit with year only and check ACF
mod <- gam(Length_cm ~ s(Year, bs = "cc"), data = all_data0)
# mod <- lm(Length_cm ~ Year, data = all_data0)
acf(resid(mod),  main = "ACF")
mod <- gam(Length_cm ~ Age + Sex + s(Year, bs = "cc") + s(Latitude_dd,Longitude_dd),
data = all_data0)
layout(matrix(1:2, ncol = 2))
plot(mod$gam, scale = 0)
layout(1)
layout(matrix(1:2, ncol = 2))
pacf(resid(mod$lme), lag.max = 36, main = "pACF")layout(matrix(1:2, ncol = 2))
## now try with some AR structures and check AIC
mod1 <- gam(Length_cm ~ Age + Sex +
s(Longitude_dd,Latitude_dd),
correlation = corAR1(form = ~ 1|Year, p = 1),
data = all_data0)
mod2 <- gam(Length_cm ~ Age + Sex + s(Year, bs = "cc") +
s(Longitude_dd,Latitude_dd),
correlation = corAR1(form = ~ 1|Year, p = 2),
data = all_data0)
mod3 <- gam(Length_cm ~ Age + Sex + s(Year, bs = "cc") +
s(Longitude_dd,Latitude_dd),
correlation = corAR1(form = ~ 1|Year, p = 3),
data = all_data0)
MuMIn::model.sel(mod,mod1,mod2,mod3)
## support for 2-year lag
layout(matrix(1:2, ncol = 2))
res <- resid(mod2, type = "deviance")
acf(res, main = "ACF - AR(2) errors")
pacf(res, main = "pACF- AR(2) errors")
layout(1)
plot(mod2,  select  =2,  scheme  =2,  lwd  =2)
layout(matrix(1:2, ncol = 2))
plot(mod2,  select  =1,  scheme  =2,  lwd  =2)
plot(mod2,  select  =2,  scheme  =2,  lwd  =2)
ggsave(plot = last_plot(), file = paste0(getwd(),"plots/gam_smooths.png"))
ggsave(plot = last_plot(), file = paste0(getwd(),"/plots/gam_smooths.png"))
layout(matrix(1:4, ncol = 2))
png( file = paste0(getwd(),"/plots/gam_check.png"))
gam.check(mod2)
dev.off()
png( file = paste0(getwd(),"/plots/gam_smooths.png"))
layout(matrix(1:2, ncol = 2))
plot(mod2,  select  =1,  scheme  =2,  lwd  =2)
plot(mod2,  select  =2,  scheme  =2,  lwd  =2)
dev.off()
png( file = paste0(getwd(),"/plots/gam_check.png"))
layout(matrix(1:4, ncol = 2))
gam.check(mod2)
dev.off()
png( file = paste0(getwd(),"/plots/gam_check.png"), height = 6, width = 8, res = 500)
layout(matrix(1:4, ncol = 2))
gam.check(mod2)
dev.off()
png( file = paste0(getwd(),"/plots/gam_smooths.png"), height = 6, width = 8, res = 500)
layout(matrix(1:2, ncol = 2))
plot(mod2,  select  =1,  scheme  =2,  lwd  =2)
plot(mod2,  select  =2,  scheme  =2,  lwd  =2)
dev.off()
png( file = paste0(getwd(),"/plots/gam_check.png"), height = 6, width = 8, units = 'in', res = 500)
layout(matrix(1:4, ncol = 2))
gam.check(mod2)
dev.off()
png( file = paste0(getwd(),"/plots/gam_smooths.png"), height = 6, width = 8, units = 'in', res = 500)
layout(matrix(1:2, ncol = 2))
plot(mod2,  select  =1,  scheme  =2,  lwd  =2)
plot(mod2,  select  =2,  scheme  =2,  lwd  =2)
dev.off()
str(gam)
str(mod2)
mod2$coefficients
str(mod2$smooth)
mod2$smooth[[2]]
mod2$smooth[[2]]$knots
llsmooth <- mod2$smooth[[2]]
llsmooth$knots
str(mod2$smooth)
str(mod2$smooth[1])
str(mod2$smooth[2])
llsmooth <- mod2$smooth[2]
llsmooth$knots
llsmooth$sp
str(llsmooth)
llsmooth$sp
llsmooth[1]
llsmooth <- mod2$smooth[2][1]
llsmooth$knots
llsmooth$sp
str(llsmooth)
llsmooth[1]
llsmooth <- mod2$smooth[2][[1]]
llsmooth$knots
llsmooth
