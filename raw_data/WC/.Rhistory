theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
geom_bar(stat = 'identity') +
labs(x = 'No. of Corrections', y = 'relative error') +
facet_wrap(~variable, scales = "free_y")
## boxplots
relErr0 %>% group_by(lenIDX, variable) %>% dplyr::summarise(MARE = mean(RelErr)) %>%
ggplot(., aes(x = factor(lenIDX), y = MARE) )+
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
geom_boxplot()+
# geom_bar(stat = 'identity') +
labs(x = 'No. of Corrections', y = 'relative error') +
facet_wrap(~variable, scales = "free_y")
## boxplots
relErr0 %>% group_by(lenIDX, variable) %>% dplyr::summarise(MARE = mean(RelErr)) %>%
ggplot(., aes(x = factor(lenIDX), y = MARE) )+
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
geom_boxplot()+
# geom_bar(stat = 'identity') +
scale_y_continuous(limits = c(0,1)) +
labs(x = 'No. of Corrections', y = 'relative error') +
facet_wrap(~variable, scales = "free_y")
relErr0
tail(relErr)
subset(relErr, variable == 'SPB_SSBMSY') %>% hist(OM_Value)
subset(relErr, variable == 'SPB_SSBMSY') %>% hist(as.numeric(OM_Value))
with(subset(relErr, variable == 'SPB_SSBMSY',hist(as.numeric(OM_Value)))
)
as.numeric(relErr$OM_Value)
class(relErr)
class(relErr$OM_Value)
hsit(relErr$OM_Value)
hist(relErr$OM_Value)
subset(relErr, OM_Value >3)
relErr0 %>% group_by(lenIDX, variable) %>% dplyr::summarise(MARE = mean(RelErr))
MARE
head(relErr)
relErr %>%
group_by(Estimation_Model) %>%
filter(variable == 'F_FMSY'  | variable == 'SPB_SSBMSY') %>%
dplyr::summarise('MARE' = median(RelErr))
relErr %>%
# group_by(Estimation_Model) %>%
filter(variable == 'F_FMSY'  | variable == 'SPB_SSBMSY') %>%
dplyr::summarise('MARE' = median(RelErr))
relErr %>%
filter(variable == 'F_FMSY'  | variable == 'SPB_SSBMSY') %>%
group_by(lenIDX, variable) %>%
dplyr::summarise('MARE' = median(RelErr))
## boxplots
relErr0 %>% group_by(lenIDX, variable) %>% dplyr::summarise(MARE = median(RelErr)) %>%
ggplot(., aes(x = factor(lenIDX), y = MARE) )+
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
geom_boxplot()+
# geom_bar(stat = 'identity') +
# scale_y_continuous(limits = c(0,1)) +
labs(x = 'No. of Corrections', y = 'relative error') +
facet_wrap(~variable, scales = "free_y")
relErr0
relErr0 %>% group_by(factor(lenIDX), variable) %>% dplyr::summarise(MARE = median(RelErr))
## boxplots
relErr0 %>% group_by(factor(lenIDX), variable) %>% dplyr::summarise(MARE = median(RelErr)) %>%
ggplot(., aes(x = factor(lenIDX), y = MARE) )+
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
geom_boxplot()+
# geom_bar(stat = 'identity') +
# scale_y_continuous(limits = c(0,1)) +
labs(x = 'No. of Corrections', y = 'relative error') +
facet_wrap(~variable, scales = "free_y")
## boxplots
relErr0 %>% group_by(lenIDX, variable) %>% dplyr::summarise(MARE = median(RelErr)) %>%
ggplot(., aes(x = factor(lenIDX), y = MARE) )+
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
geom_boxplot()+
# geom_bar(stat = 'identity') +
# scale_y_continuous(limits = c(0,1)) +
labs(x = 'No. of Corrections', y = 'relative error') +
facet_wrap(~variable, scales = "free_y")
rm(list =ls())
rm(list = ls()); set.seed(731)
require(ggplot2)
require(r4ss)
require(doParallel)
require(dplyr)
library(ThorsonUtilities); #devtools::install_github("james-thorson/utilities")
library(gtools)
library(kaputils); #install.packages( "c:/users/mkapur/documents/github/kaputils",  repos = NULL, type = "source", dependencies = T)
library(gridExtra)
## folder setup
RootFile = "C:/users/mkapur/dropbox/HAKEBOOT/"
setwd(RootFile)
## Load packages and R functions
mapply(source, list.files(paste0(RootFile,"tuna-misspec/"), pattern = ".R", full.names=TRUE))
# Configuration settings
verbose = FALSE
Species = "HAKE"
SpeciesOM <- paste0(RootFile,Species,"_OM/")
## COMPILE RESULTS ----
## full ss-compare plots
llabls <- list.dirs(RootFile, recursive = T)[grep('HAKE_',list.files(RootFile, recursive = T))]
llabls
kaputils::ss_compare(rootdir = RootFile,
pattern = "Rep",
subplots = c(1:9,20),
plotloc = paste0(RootFile,"/plots/"),
likeCSV = F,
dolegend = F,
llabels = llabls,
fishery = Species)
kaputils::extractResults(rootdir = RootFile,
pattern = "HAKE_",
subpattern = 'Rep',
writeTables = T,
FleetName = c("XX","XX","All")[3])
refList <- read.csv(paste0(RootFile,"/results/management_quantities.csv"))
opmod <- refList[grepl("OM", refList$MOD), ] %>%    melt(id = c("MOD","REP"))
## extract EM
emod <-  refList[grepl("EM", refList$MOD), ] %>%
melt(id = c("MOD","REP","IDX"))
relErr <- merge(opmod, emod, by = c("variable","REP")) %>%
plyr::rename(c("value.x" = "OM_Value", 'MOD.y' = "Estimation_Model", "value.y" = "EM_Value")) %>%
select(-MOD.x) %>%
## round to avoid multi-million errors on very small #s
mutate(OM_Value = round(as.numeric(OM_Value),4),
EM_Value = round(EM_Value,4)) %>%
mutate("RelErr" = ifelse(as.numeric(OM_Value) != 0, abs((as.numeric(OM_Value)-EM_Value)/as.numeric(OM_Value)),
abs((as.numeric(OM_Value)-EM_Value))))
write.csv(relErr, paste0(RootFile,"/results/relative_error.csv"), row.names = F)
RMSE <- relErr %>%
group_by(Estimation_Model, variable) %>%
dplyr::summarise('RMSE' = sqrt(mean(RelErr^2)))
#  write.csv(RMSE, paste0(RootFile,"/results/RMSE.csv"), row.names = F)
MARE <- relErr %>%
filter(variable == 'F_FMSY'  | variable == 'SPB_SSBMSY') %>%
group_by(lenIDX, variable) %>%
dplyr::summarise('MARE' = median(RelErr))
# write.csv(RMSE, paste0(RootFile,"/results/MARE.csv"), row.names = F)
## plot
## plot it sort by descending relerr
relErr <- read.csv(paste0(RootFile,"/results/relative_error.csv")) %>% mutate(lenIDX = nchar(as.character(IDX)))
relErr0 <- relErr  %>% filter(variable == 'F_FMSY'  | variable == 'SPB_SSBMSY')
ggplot(relErr0, aes(x =  reorder(IDX, lenIDX), y = RelErr)) +
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
geom_bar(stat = 'identity') +
labs(x = 'index', y = 'relative error') +
facet_wrap(~variable, scales = "free_y")
# ggsave(plot = last_plot(), file = paste0(RootFile,'plots/relative_error_bar.jpg'))
## boxplots
relErr0 %>% group_by(lenIDX, variable) %>% dplyr::summarise(MARE = median(RelErr)) %>%
ggplot(., aes(x = factor(lenIDX), y = MARE) )+
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
geom_boxplot()+
# geom_bar(stat = 'identity') +
# scale_y_continuous(limits = c(0,1)) +
labs(x = 'No. of Corrections', y = 'relative error') +
facet_wrap(~variable, scales = "free_y")
# ggsave(plot = last_plot(), file = paste0(RootFile,'plots/relative_error_box.jpg'))
relErr0 %>% group_by(lenIDX, variable) %>% dplyr::summarise(MARE = median(RelErr))
head(relErr0)
## boxplots
relErr0 %>%
group_by(lenIDX, variable) %>%
# dplyr::summarise(MARE = median(RelErr)) %>%
ggplot(., aes(x = factor(lenIDX), y = RelErr) )+
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
geom_boxplot()+
# geom_bar(stat = 'identity') +
# scale_y_continuous(limits = c(0,1)) +
labs(x = 'No. of Corrections', y = 'relative error') +
facet_wrap(~variable, scales = "free_y")
ggplot(relErr0, aes(x =  reorder(IDX, lenIDX), y = RelErr)) +
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
geom_bar(stat = 'identity') +
labs(x = 'index', y = 'relative error') +
facet_wrap(~variable, scales = "free_y")
ggsave(plot = last_plot(), file = paste0(RootFile,'plots/relative_error_bar.jpg'))
## boxplots
relErr0 %>%
group_by(lenIDX, variable) %>%
dplyr::summarise(MARE = median(RelErr)) %>%
ggplot(., aes(x = factor(lenIDX), y = MARE) )+
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
# geom_boxplot()+
geom_point() +
# scale_y_continuous(limits = c(0,1)) +
labs(x = 'No. of Corrections', y = 'relative error') +
facet_wrap(~variable, scales = "free_y")
ggsave(plot = last_plot(), file = paste0(RootFile,'plots/relative_error_box.jpg'))
head(relErr0)
relErr0 %>%
filter(lenIDX == 1  | lenIDX == 2) %>%
group_by(lenIDX, variable) %>%
dplyr::summarise(MARE = median(RelErr)) %>%
ggplot(., aes(x = factor(lenIDX), y = MARE) )+
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
# geom_boxplot()+
geom_point() +
# scale_y_continuous(limits = c(0,1)) +
labs(x = 'No. of Corrections', y = 'relative error') +
facet_wrap(~variable, scales = "free_y")
ggplot(relErr0, aes(x =  reorder(IDX, lenIDX), y = RelErr)) +
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
geom_bar(stat = 'identity') +
labs(x = 'index', y = 'relative error') +
facet_wrap(~variable, scales = "free_y")
ggsave(plot = last_plot(), file = paste0(RootFile,'plots/relative_error_bar.jpg'), height = 3, width = 4, unit = 'in', dpi = 520)
## boxplots
relErr0 %>%
group_by(lenIDX, variable) %>%
dplyr::summarise(MARE = median(RelErr)) %>%
ggplot(., aes(x = factor(lenIDX), y = MARE) )+
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
# geom_boxplot()+
geom_point() +
# scale_y_continuous(limits = c(0,1)) +
labs(x = 'No. of Corrections', y = 'relative error') +
facet_wrap(~variable, scales = "free_y")
ggsave(plot = last_plot(), file = paste0(RootFile,'plots/relative_error_box.jpg'), height = 3, width = 4, unit = 'in', dpi = 520)
## boxplots
relErr0 %>%
group_by(lenIDX, variable) %>%
dplyr::summarise(MARE = median(RelErr)) %>%
ggplot(., aes(x = factor(lenIDX), y = MARE) )+
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
# geom_boxplot()+
geom_point() +
# scale_y_continuous(limits = c(0,1)) +
labs(x = 'No. of Corrections', y = 'Median Absolute Relative Error') +
facet_wrap(~variable, scales = "free_y")
ggsave(plot = last_plot(), file = paste0(RootFile,'plots/relative_error_box.jpg'), height = 3, width = 4, unit = 'in', dpi = 520)
3.5/4
0.875*3
ggsave(plot = last_plot(), file = paste0(RootFile,'plots/relative_error_box.jpg'), height = 2.625, width = 3.5, unit = 'in', dpi = 520)
ggplot(relErr0, aes(x =  reorder(IDX, lenIDX), y = RelErr)) +
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
geom_bar(stat = 'identity') +
labs(x = 'index', y = 'absolute relative error') +
facet_wrap(~variable, scales = "free_y")
ggsave(plot = last_plot(), file = paste0(RootFile,'plots/relative_error_bar.jpg'), height = 2.625, width = 3.5, unit = 'in', dpi = 520)
group_by(lenIDX, variable) %>%
dplyr::summarise(MARE = median(RelErr)) %>%
ggplot(., aes(x = factor(lenIDX), y = MARE) )+
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
# geom_boxplot()+
geom_point() +
# scale_y_continuous(limits = c(0,1)) +
labs(x = 'No. of Corrections', y = 'Median Absolute Relative Error') #+
## boxplots
relErr0 %>%
filter(variable == 'F_FMSY') %>%
group_by(lenIDX, variable) %>%
dplyr::summarise(MARE = median(RelErr)) %>%
ggplot(., aes(x = factor(lenIDX), y = MARE) )+
theme_bw()+
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 45)) +
# geom_boxplot()+
geom_point() +
# scale_y_continuous(limits = c(0,1)) +
labs(x = 'No. of Corrections', y = 'Median Absolute Relative Error') #+
## parest by sex and region
parest <- read.csv("C:/Users/mkapur/Dropbox/UW/sab-growth/results/parEst_2018_11_06.csv")
## parest by sex and region
parest <- read.csv("C:/Users/mkapur/Dropbox/UW/sab-growth/results/parEst_2018-11-06.csv")
head(parest)
vr = '3 Zone'
ggplot(subset(parest, variable == vr), aes(x = variable, y = value, fill = variable))+
geom_boxplot() +
facet_wrap(~model+Sex)
ggplot(subset(parest, model == vr), aes(x = variable, y = value, fill = variable))+
geom_boxplot() +
facet_wrap(~model+Sex)
## parest by sex and region
parest <- read.csv("C:/Users/mkapur/Dropbox/UW/sab-growth/results/parEst_2018-11-06.csv") %>% filter(variable != "Sigma")
## exponentiate logk
parest[variable == 'log_k','value'] <- exp(parest[variable == 'log_k','value'] )
parest[parest$variable == 'log_k','value']
## exponentiate logk
parest[parest$variable == 'log_k','value'] <- exp(parest[parest$variable == 'log_k','value'] )
ggplot(subset(parest, model == vr), aes(x = variable, y = value, fill = variable))+
geom_boxplot() +
facet_wrap(~model+Sex)
ggplot(subset(parest, model == vr), aes(x = st, y = value))+
geom_boxplot() +
facet_wrap(~model+Sex+variable)
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = sex))+
geom_boxplot() +
facet_wrap(~model+variable)
parest
head(rep)
head(parest)
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
geom_boxplot() +
facet_wrap(~model+variable)
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
geom_boxplot() +
facet_wrap(~model+variable, scales = "free_y")
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
geom_boxplot() +
facet_wrap(~model+variable, scales = "free_y") +
labs(x = 'Spatial Stratum', y = variable)
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
geom_boxplot() +
labs(x = 'Spatial Stratum', y = variable)+
facet_wrap(~model+variable, scales = "free_y") +
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
geom_boxplot() +
labs(x = 'Spatial Stratum', y = "")+
facet_wrap(~model+variable, scales = "free_y") +
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
geom_boxplot() +
labs(x = 'Spatial Stratum', y = "")+
facet_wrap(~model+variable, scales = "free_y")
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
geom_boxplot() +
labs(x = 'Spatial Stratum', y = "") +
facet_wrap(~model+variable, scales = "free_y")
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
theme_minimal() +
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.1),
legend.text = element_text(size = 14),
strip.text = element_text(size=14))+
geom_boxplot() +
labs(x = 'Spatial Stratum', y = "") +
facet_wrap(~model+variable, scales = "free_y")
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
theme_bw() +
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.1),
legend.text = element_text(size = 14),
strip.text = element_text(size=14))+
geom_boxplot() +
labs(x = 'Spatial Stratum', y = "") +
facet_wrap(~model+variable, scales = "free_y")
parest[parest$variable == 'log_k','variable'] <- "k"
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
theme_bw() +
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.1),
legend.text = element_text(size = 14),
strip.text = element_text(size=14))+
geom_boxplot() +
labs(x = 'Spatial Stratum', y = "") +
facet_wrap(~model+variable, scales = "free_y")
parest[parest$variable == 'log_k','variable']
## parest by sex and region
parest <- read.csv("C:/Users/mkapur/Dropbox/UW/sab-growth/results/parEst_2018-11-06.csv") %>% filter(variable != "Sigma")
## exponentiate logk
parest[parest$variable == 'log_k','value'] <- exp(parest[parest$variable == 'log_k','value'] )
parest$variable <- ifelse(parest$variable=='log_k',"k",parest$variable)
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
theme_bw() +
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.1),
legend.text = element_text(size = 14),
strip.text = element_text(size=14))+
geom_boxplot() +
labs(x = 'Spatial Stratum', y = "") +
facet_wrap(~model+variable, scales = "free_y")
parest <- read.csv("C:/Users/mkapur/Dropbox/UW/sab-growth/results/parEst_2018-11-06.csv") %>% filter(variable != "Sigma")
## exponentiate logk
parest[parest$variable == 'log_k','value'] <- exp(parest[parest$variable == 'log_k','value'] )
parest$variable <- ifelse(parest$variable=='log_k',"k",paste(parest$variable))
unique(parest$variable)
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
theme_bw() +
theme(panel.grid = element_blank(),
legend.position = c(0.9,0.1),
legend.text = element_text(size = 14),
strip.text = element_text(size=14))+
geom_boxplot() +
labs(x = 'Spatial Stratum', y = "") +
facet_wrap(~model+variable, scales = "free_y")
require(TMB); require(dplyr); require(ggplot2); require(reshape)
options(scipen=999)
rm(list = ls())
## load objects made in dataprep
setwd("C:/Users/mkapur/Dropbox/UW/sab-growth")
load( paste0(getwd(),"/data/all_data.rda")) ## all_data
load( paste0(getwd(),"/data/DES.rda")) ## DES
# load( paste0(getwd(),"/data/REG.rda")) ## REG
# load( paste0(getwd(),"/data/SEL.rda")) ## SEL
load( paste0(getwd(),"/data/KEY.rda")) ## KEY
compile("sptlvb.cpp")
dyn.load(dynlib("sptlvb"))
dat0 <- rep0 <- aic0 <- NULL ## later s
for(s in c(1:ncol(DES))){ ## 4 hypotheses for spatial groupings
nStrata <- length(unique(DES[,s]))
data <-
list(
Length_cm = all_data[,"Length_cm"],
Age = all_data[,"Age"],
DES = as.vector(DES[,s]),
nStrata = nStrata
)
parameters <-
list(
log_Linf = rep(log(70), nStrata),
log_k = rep(0, nStrata),
t0 = rep(0, nStrata),
# sigma0 = 0,
# sigma1 = 0
Sigma = 0
)
# Now estimate everything
map <- NULL
model <- MakeADFun(data, parameters,  DLL="sptlvb",silent=T,map=map)
fit <- nlminb(model$par, model$fn, model$gr, control = list(rel.tol = 1e-12, eval.max = 100000,iter.max = 10000), lower = 0.01)
# for (k in 1:3)  fit <- nlminb(model$env$last.par.best, model$fn, model$gr) ## start at last-best call, for stability
best <- model$env$last.par.best
# print(c(best[1:6],exp(best[7:length(best)])))
# print(fit$objective)
rep <- sdreport(model)
dat0 <- c(dat0, model$report()$ypreds %>% data.frame()) ## each 6 cols is new sim
rep0 <- bind_rows(rep0, bind_cols(data.frame(names(rep$value)),data.frame(rep$value),data.frame(c(rep(unique(KEY[,s]),3), rep("ALL",1)))))
aic0 <- c(aic0, model$report()$aic %>% data.frame())
}
rep0
head(rep)
View(rep)
rep
subset(parest, model == vr)
# parest by sex and region
parest <- read.csv("C:/Users/mkapur/Dropbox/UW/sab-growth/results/parEst_2018-11-06.csv") %>% filter(variable != "Sigma")
## exponentiate logk
parest[parest$variable == 'log_k','value'] <- exp(parest[parest$variable == 'log_k','value'] )
parest$variable <- ifelse(parest$variable=='log_k',"k",paste(parest$variable))
subset(parest, model == vr)
subset(parest, model == '3 Zone')
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
theme_bw() +
theme(panel.grid = element_blank(),
legend.position = c(0.1,0.9),
legend.text = element_text(size = 14),
strip.text = element_text(size=14))+
geom_boxplot() +
labs(x = 'Spatial Stratum', y = "") +
facet_wrap(~model+variable, scales = "free_y")
vr = '3 Zone'
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
theme_bw() +
theme(panel.grid = element_blank(),
legend.position = c(0.1,0.9),
legend.text = element_text(size = 14),
strip.text = element_text(size=14))+
geom_boxplot() +
labs(x = 'Spatial Stratum', y = "") +
facet_wrap(~model+variable, scales = "free_y")
ggplot(subset(parest, model == vr), aes(x = st, y = value, col = Sex))+
theme_bw() +
theme(panel.grid = element_blank(),
legend.position = c(0.05,0.9),
legend.text = element_text(size = 14),
strip.text = element_text(size=14))+
geom_boxplot() +
labs(x = 'Spatial Stratum', y = "") +
facet_wrap(~model+variable, scales = "free_y")
# Load the packaged
library(nwfscSurvey)
# Look at the vignette
vignette("nwfscSurvey")
# Look at all the functions in the package
ls("package:nwfscSurvey")
#===============================================================================
#=============          NWFSC Combo          ===================================
#===============================================================================
setwd("C:/Users/mkapur/Dropbox/UW/sab-growth")
?PullBio.fn
?PullCatch.fn
PullCatch.fn(Name = "sablefish", SurveyName = "Triennial", SaveFile = TRUE, Dir = getwd())
df<-PullCatch.fn( SurveyName = "Triennial", SaveFile = TRUE, Dir = getwd())
df<-PullCatch.fn( Name = 'sablefishe', SurveyName = "Triennial", SaveFile = TRUE, Dir = getwd())
df<-PullBio.fn( Name = 'sablefish', SurveyName = "Triennial", SaveFile = TRUE, Dir = getwd())
df<-PullBio.fn(Name = 'sablefish', SurveyName = "Triennial", SaveFile = TRUE, Dir = getwd())
# https://github.com/nwfsc-assess/nwfscSurvey
devtools::install_github("nwfsc-assess/nwfscSurvey", ref = "development", build_vignettes = TRUE)
catch = PullCatch.fn(Name = "sablefish", SurveyName = "NWFSC.Combo", SaveFile = TRUE, Dir = getwd())
catch = PullCatch.fn(Name = "sablefish", SurveyName = "Triennial", SaveFile = TRUE, Dir = getwd())
devtools::install_github("nwfsc-assess/nwfscSurvey", build_vignettes = TRUE)
# Load the packaged
library(nwfscSurvey)
PullCatch.fn(Name = "sablefish", SurveyName = "Triennial", SaveFile = TRUE, Dir = getwd())
# Look at the vignette
vignette("nwfscSurvey")
?PullCatch.fn
?PullCatch.fn
?PullCatch.fn
## WEST COAST ----
load(paste0(getwd(), "/data/raw/WC/Bio__NWFSC.Combo_2018-09-25.rda"), verbose = T) ## loads as "Data"
wcsurv0 <- Data; rm(Data)
head(wcsurv0)
unique(wcsurv0$Project)
bio   = PullBio.fn(Name = "sablefish", SurveyName = "NWFSC.Combo", SaveFile = TRUE, Dir = getwd())
#===============================================================================
#=============          NWFSC Combo          ===================================
#===============================================================================
setwd("C:/Users/mkapur/Dropbox/UW/sab-growth/data/raw/WC")
