model$fn,
model$gr,
control = list(
rel.tol = 1e-16,
eval.max = 100000,
iter.max = 1000000
),
lower = lowbnd,
upper = uppbnd
)
fit$par
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-16,
eval.max = 100000,
iter.max = 100
),
lower = lowbnd,
upper = uppbnd
)
fit$par
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-16,
eval.max = 100000,
iter.max = 10E5
),
lower = lowbnd,
upper = uppbnd
)
fit$par
model$report()
fit$objective
model$fn()
fit
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 10E5
),
lower = lowbnd,
upper = uppbnd
)
model$gr()
model <- MakeADFun(data, parameters,  DLL="schaefer",silent=T)
model$report()
model$fn
model$fn()
model$gr()
compile("deriso.cpp")
dyn.load(dynlib("deriso"))
data <- list(year = cdat$year, catchobs = cdat$catch, abundobs = adat$abundance, abundse= adat$se, abundyrs = adat$year, consC = 1, task = 1)
parameters <-  list( K = 1000, h = 0.5, Ft = (rep(-2, length(cdat$year)-1)))
lowbnd = c(500, 0, rep(-20,(length(cdat$year)-1)))
uppbnd = c(1500,  1,  rep(-0.01,(length(cdat$year)-1)))
model <- MakeADFun(data, parameters,  DLL="deriso",silent=T)
model$report()
# model$fn()
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
for (k in 1:3)  fit <- nlminb(model$env$last.par.best, model$fn, model$gr,  control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
fit$par
model$report()
fit$objective
rm(list = ls())
options(scipen = 0)
require(ggplot2, quietly = T)
require(TMB, quietly = T)
require(reshape)
require(dplyr, quietly = T)
require(rstan)
require(tmbstan)
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
require(ggplot2)
cbind(depts,"year" = 1:31) %>% data.frame() %>%
ggplot(.,aes(x = year+1969, y = depts )) +
theme_bw() +
geom_line() +
labs(x = 'year', y = 'Pseudo Depletion (B/K)', main = 'Incorrectly Estimated Deplication Time Series' )
rm(list = ls())
options(scipen = 0)
require(ggplot2, quietly = T)
require(TMB, quietly = T)
require(reshape)
require(dplyr, quietly = T)
require(rstan)
require(tmbstan)
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
setwd("~/GitHub/FISH-559/Home4")
cdat <- read.csv("HWK4.csv")[1:30,1:2]
adat <- read.csv("HWK4.csv")[32:37,1:3]
names(cdat) <- c('year','catch')
names(adat) <- c('year','abundance','se')
cdat$catch <- as.numeric(as.character(cdat$catch))
adat$abundance <- as.numeric(as.character(adat$abundance))
adat$se <- as.numeric(as.character(adat$se))
head(adat); head(cdat)
compile("deriso.cpp")
dyn.load(dynlib("deriso"))
data <- list(year = cdat$year, catchobs = cdat$catch, abundobs = adat$abundance, abundse= adat$se, abundyrs = adat$year, consC = 1, task = 1)
parameters <-  list( K = 1000, h = 0.5, Ft = (rep(-2, length(cdat$year)-1)))
lowbnd = c(500, 0, rep(-20,(length(cdat$year)-1)))
uppbnd = c(1500,  1,  rep(-0.01,(length(cdat$year)-1)))
model <- MakeADFun(data, parameters,  DLL="deriso",silent=T)
model$report()
# model$fn()
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
for (k in 1:3)  fit <- nlminb(model$env$last.par.best, model$fn, model$gr,  control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
fit$par
model$report()
fit$objective
deriso_stan <- tmbstan(model)
samp <- extract(deriso_stan) ## run using tmbstan
par(mfrow = c(1,3))
hist(samp$K)
hist(samp$h)
hist(samp$Ft)
par(mfrow = c(1,1))
## Get out depletion time series to plot later
tempd <- as.matrix(deriso_stan,pars = c("K","Ft","h"))
postrep <- apply(X = tempd, MARGIN = 1, FUN = model$report) ## get report file
depts <- data.frame(B = rep(NA,31))
for(i in 1:length(postrep)){
depts[,i] <- data.frame(postrep[[i]][3])/tempd[i,"K"]
}
depts <- apply(depts,1,FUN = median)
compile("shfr.cpp")
dyn.load(dynlib("shfr"))
parameters <-  list(log_r = -1.2, K = 1000,  Ft = rep(-2, (length(cdat$year))))
lowbnd = c( -10, 500, rep(-20,(length(cdat$year))))
uppbnd = c(  0, 1500,  rep(-0.01,(length(cdat$year))))
# compile("schaefer.cpp")
# dyn.load(dynlib("schaefer"))
compile("shfr.cpp")
dyn.load(dynlib("shfr"))
parameters <-  list(log_r = -1.2, K = 1000,  Ft = rep(-2, (length(cdat$year))))
lowbnd = c( -10, 500, rep(-20,(length(cdat$year))))
uppbnd = c(  0, 1500,  rep(-0.01,(length(cdat$year))))
data <- list(year = cdat$year, catchobs = cdat$catch, abundobs = adat$abundance, abundse= adat$se, abundyrs = adat$year)
# model <- MakeADFun(data, parameters,  DLL="schaefer",silent=T)
model <- MakeADFun(data, parameters,  DLL="shfr",silent=T)
# model$fn()
# model$report()
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
compile("deriso.cpp")
K = 1000
Type rho = 0.995
dyn.load(dynlib("deriso"))
Type w = 0.5
data <- list(year = cdat$year, catchobs = cdat$catch, abundobs = adat$abundance, abundse= adat$se, abundyrs = adat$year, consC = 1, task = 1)
M = 0.2
w = 0.5
rho = 0.995
K =1000
s = exp(-M)
K*(1-s-rho*s+rho*exp(-2*M))/(1-rho*w*s)
data <- list(year = cdat$year, catchobs = cdat$catch, abundobs = adat$abundance, abundse= adat$se, abundyrs = adat$year, consC = 1, task = 1)
parameters <-  list( K = 1000, h = 0.5, Ft = (rep(-2, length(cdat$year)-1)))
lowbnd = c(500, 0, rep(-20,(length(cdat$year)-1)))
uppbnd = c(1500,  1,  rep(-0.01,(length(cdat$year)-1)))
model <- MakeADFun(data, parameters,  DLL="deriso",silent=T)
model$report()
# model$fn()
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
model$report()
compile("deriso.cpp")
dyn.load(dynlib("deriso"))
compile("deriso.cpp")
dyn.load(dynlib("deriso"))
rm(list = ls())
options(scipen = 0)
require(ggplot2, quietly = T)
require(TMB, quietly = T)
require(reshape)
require(dplyr, quietly = T)
require(rstan)
require(tmbstan)
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
setwd("~/GitHub/FISH-559/Home4")
cdat <- read.csv("HWK4.csv")[1:30,1:2]
adat <- read.csv("HWK4.csv")[32:37,1:3]
names(cdat) <- c('year','catch')
names(adat) <- c('year','abundance','se')
cdat$catch <- as.numeric(as.character(cdat$catch))
adat$abundance <- as.numeric(as.character(adat$abundance))
adat$se <- as.numeric(as.character(adat$se))
head(adat); head(cdat)
compile("deriso.cpp")
dyn.load(dynlib("deriso"))
data <- list(year = cdat$year, catchobs = cdat$catch, abundobs = adat$abundance, abundse= adat$se, abundyrs = adat$year, consC = 1, task = 1)
parameters <-  list( K = 1000, h = 0.5, Ft = (rep(-2, length(cdat$year)-1)))
lowbnd = c(500, 0, rep(-20,(length(cdat$year)-1)))
uppbnd = c(1500,  1,  rep(-0.01,(length(cdat$year)-1)))
model <- MakeADFun(data, parameters,  DLL="deriso",silent=T)
model$report()
# model$fn()
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
for (k in 1:3)  fit <- nlminb(model$env$last.par.best, model$fn, model$gr,  control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
fit$par
model$report()
fit$objective
compile("schaefer.cpp")
dyn.load(dynlib("schaefer"))
# compile("shfr.cpp")
# dyn.load(dynlib("shfr"))
parameters <-  list(log_r = -1.2, K = 1000,  Ft = rep(-2, (length(cdat$year))))
lowbnd = c( -10, 500, rep(-20,(length(cdat$year))))
uppbnd = c(  0, 1500,  rep(-0.01,(length(cdat$year))))
data <- list(year = cdat$year, catchobs = cdat$catch, abundobs = adat$abundance, abundse= adat$se, abundyrs = adat$year)
model <- MakeADFun(data, parameters,  DLL="schaefer",silent=T)
# model <- MakeADFun(data, parameters,  DLL="shfr",silent=T)
# model$fn()
# model$report()
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
# compile("schaefer.cpp")
# dyn.load(dynlib("schaefer"))
compile("shfr.cpp")
dyn.load(dynlib("shfr"))
parameters <-  list(log_r = -1.2, K = 1000,  Ft = rep(-2, (length(cdat$year))))
lowbnd = c( -10, 500, rep(-20,(length(cdat$year))))
uppbnd = c(  0, 1500,  rep(-0.01,(length(cdat$year))))
data <- list(year = cdat$year, catchobs = cdat$catch, abundobs = adat$abundance, abundse= adat$se, abundyrs = adat$year)
# model <- MakeADFun(data, parameters,  DLL="schaefer",silent=T)
model <- MakeADFun(data, parameters,  DLL="shfr",silent=T)
# model$fn()
# model$report()
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 1000
),
lower = lowbnd,
upper = uppbnd
)
load( paste0(getwd(),"/data/all_data.rda")) ## all_data
require(mgcv); require(dplyr); require(reshape); require(RColorBrewer); require(ggplot2)
library(ggsidekick);require(TMB)
## load and cbind data
setwd("C:/Users/mkapur/Dropbox/UW/sab-growth")
load( paste0(getwd(),"/data/all_data.rda")) ## all_data
load( paste0(getwd(),"/data/DES.rda")) ## DES
compile("sptlvb.cpp")
dyn.load(dynlib("sptlvb"))
dat0 <- rep0 <- aic0 <- NULL ## later storage
## get K, Linf estimates for ALL data
nStrata <- length(unique(DES[,1])) ## pooled hypothesis
data <-
list(
Length_cm = all_data[,"Length_cm"],
Age = all_data[,"Age"],
DES = as.vector(DES[,1]),
nStrata = nStrata
)
parameters <-
list(
log_Linf = rep(log(70), nStrata),
log_k = rep(log(0.5), nStrata),
t0 = rep(0, nStrata),
log_Sigma = 0
)
# Now estimate everything
map <- NULL
model <- MakeADFun(data, parameters,  DLL="sptlvb",silent=T,map=map)
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 10000
)
)
# for (k in 1:3)  fit <- nlminb(model$env$last.par.best, model$fn, model$gr) ## start at last-best call, for stability
best <- model$env$last.par.best
rep <- sdreport(model)
dat0 <- c(dat0, model$report()$ypreds %>% data.frame()) ## each 6 cols is new sim
rep0 <- bind_rows(rep0, bind_cols(data.frame(names(rep$value)),data.frame(rep$value),data.frame(rep$sd),data.frame(c(rep(unique(KEY[,s]),3), rep("ALL",1)))))
aic0 <- c(aic0, model$report()$aic %>% data.frame())
names(rep0) <- c('variable', 'value','sd', 'ID')
dat0
rep0
load( paste0(getwd(),"/data/KEY.rda")) ## KEY
rep0 <- bind_rows(rep0, bind_cols(data.frame(names(rep$value)),data.frame(rep$value),data.frame(rep$sd),data.frame(c(rep(unique(KEY[,s]),3), rep("ALL",1)))))
rep0 <- bind_rows(rep0, bind_cols(data.frame(names(rep$value)),data.frame(rep$value),
data.frame(rep$sd),data.frame(c(rep(unique(KEY[,1]),3), rep("ALL",1)))))
aic0 <- c(aic0, model$report()$aic %>% data.frame())
names(rep0) <- c('variable', 'value','sd', 'ID')
rep0 <- rep0 %>% mutate(
Sex = sub('_.*$', '', ID),
st = sub(".*_ *(._?)", "\\1", ID)
) %>% select(-ID)
write.csv(rep0, paste0(getwd(),"/results/parEstPOOLED_",Sys.Date(),'.csv'),row.names = F)
rep0
write.csv(parest, paste0(getwd(),"/results/parEstPOOLED_",Sys.Date(),'.csv'),row.names = F)
parest <- rep0
## exponentiate logk
parest[parest$variable == 'log_k','value'] <- exp(parest[parest$variable == 'log_k','value'] )
parest$variable <- ifelse(parest$variable=='log_k',"k",paste(parest$variable))
write.csv(parest, paste0(getwd(),"/results/parEstPOOLED_",Sys.Date(),'.csv'),row.names = F)
parest <- read.csv("C:/Users/mkapur/Dropbox/UW/sab-growth/results/parEstPOOLED_2018-12-09.csv") %>% filter(variable != "Sigma")
str(sdreport)
str(rep)
rep$cov
cov <- rep$cov
names(cov <- names(rep$value))
names(cov) <- names(rep$value))
cov <- rep$cov
names(cov) <- names(rep$value))
names(cov) <- names(rep$value)
cov
class(cob)
class(cov)
cov <- rep$cov %>% data.frame()
names(cov) <- names(rep$value)
cov
row.names(cov) <- names(rep$value)
str(rep)
rep$cov.fixed
library(ggsidekick);require(TMB);require(MASS)
## extract covariance matrix for parests
mu <- parest
covMat <- rep$cov.fixed %>% data.frame()
## use mvrnorm to simulate 10k values of Linf and K
simd <- mvrnorm(n = 212, mu = mu, Sigma = covMat, empirical = FALSE)
mu
## use mvrnorm to simulate 10k values of Linf and K
simd <- mvrnorm(n = 212, mu =  parest$value, Sigma = covMat, empirical = FALSE)
covMat
dim(covMat)
dim(parest$value)
## use mvrnorm to simulate 10k values of Linf and K
simd <- mvrnorm(n = 212, mu =  c(parest$value), Sigma = covMat, empirical = FALSE)
length(c(parest$value))
parest$value
rep$cov.fixed[,1:6]
## extract covariance matrix for parests
mu <-
covMat <- rep$cov.fixed[,1:6] %>% data.frame()
## use mvrnorm to simulate 10k values of Linf and K
simd <- mvrnorm(n = 212, mu =  c(parest$value), Sigma = covMat, empirical = FALSE)
covMat
rep
rep
rep$cov.fixed
cov2cor(rep$cov)
cov2cor(rep$cov.fixed)
## extract covariance matrix for parests
covMat <- cov2cor(rep$cov.fixed)[,1:6] %>% data.frame()
covMat
rownames(covMat) <- NULL
## use mvrnorm to simulate 10k values of Linf and K
simd <- mvrnorm(n = 212, mu =  c(parest$value), Sigma = covMat, empirical = FALSE)
## use mvrnorm to simulate 10k values of Linf and K
simd <- mvrnorm(n = 10, mu =  c(parest$value), Sigma = covMat, empirical = FALSE)
covMat
dim(covMat)
dim(parest$value)
length(parest$value)
## extract covariance matrix for parests
covMat <- cov2cor(rep$cov.fixed)[1:6,1:6] %>% data.frame()
rownames(covMat) <- NULL
## use mvrnorm to simulate 10k values of Linf and K
simd <- mvrnorm(n = 10, mu =  c(parest$value), Sigma = covMat, empirical = FALSE)
simd
cor(simd)
?mvrnorm
head(rep$cov.fixed)
parest$value
parest$variable
parest
## extract covariance matrix for parests
covMat <- cov2cor(rep$cov.fixed)[3:6,3:6] %>% data.frame()
rownames(covMat) <- NULL
## use mvrnorm to simulate 10k values of Linf and K
simd <- mvrnorm(n = 10, mu =  c(parest$value[3:6]), Sigma = covMat, empirical = FALSE)
dim(simd)
simd
cov(simd)
cor(simd)
parest
paste(parest$variable,parest$Sex)
10E5
10E4
1E5
## use mvrnorm to simulate 10k values of Linf and K
simd <- mvrnorm(n = 10E4, mu =  c(parest$value[3:6]), Sigma = covMat, empirical = FALSE)
names(simd) <-  paste(parest$variable,parest$Sex)
head(simd)
names(simd)
head(simd)
paste(parest$variable,parest$Sex)
names(simd) <-  paste(parest$variable[3:6],parest$Sex[3:6])
head(simd)
paste(parest$variable[3:6],parest$Sex[3:6])
names(simd)
## use mvrnorm to simulate 10k values of Linf and K
simd <- mvrnorm(n = 10E4, mu =  c(parest$value[3:6]), Sigma = covMat, empirical = FALSE)
names(simd) <-  c(paste(parest$variable[3:6],
parest$Sex[3:6]))
simd
head(simd)
class(simd)
## use mvrnorm to simulate 10k values of Linf and K
simd <- mvrnorm(n = 10E4, mu =  c(parest$value[3:6]),
Sigma = covMat, empirical = FALSE) %>% data.frame()
names(simd) <-  c(paste(parest$variable[3:6],
parest$Sex[3:6]))
head(simd)
