ptf[v] <- tmp$value[tmp$source == 'Actual' &  tmp$REG ==    cdf[idx,'REG']] >= bounds[1] &
tmp$value[tmp$source == 'Actual'&  tmp$REG ==    cdf[idx,'REG']] <= bounds[2]
} ## end vars
cdf[idx,'k'] <- ptf[1];  cdf[idx,'Linf'] <- ptf[2]
idx <- idx+1
} ## end gamREGS
cdf[idx,'scen'] <- scen
cdf
cdf <- NULL
cdf <- data.frame()
idx = 1
for(iq in 1:length(unique(parest$REG))){ ## loop regions
cdf[idx,'scen'] <- scen
cdf[idx,'boot'] <- b
cdf[idx,'gamREG'] <- if(!is.na(gamREGS[iq])){gamREGS[iq]}else{last(gamREGS)}
cdf[idx,'REG'] <- if(!is.na(REGS[iq])){REGS[iq]}else{last(REGS)}
ptf <- NULL
for(v in  1:length(parms)){ ## loop variables
tmp <- subset(parest, variable == parms[v])
bounds <- tmp %>% filter(source == 'Estimated' & REG == gamREGS[iq]) %>% select(lwr,upr)
# cdf[idx,'k'] <- ptf[1];  cdf[idx,'Linf'] <- ptf[2]
ptf[v] <- tmp$value[tmp$source == 'Actual' &  tmp$REG ==    cdf[idx,'REG']] >= bounds[1] &
tmp$value[tmp$source == 'Actual'&  tmp$REG ==    cdf[idx,'REG']] <= bounds[2]
} ## end vars
cdf[idx,'k'] <- ptf[1];  cdf[idx,'Linf'] <- ptf[2]
idx <- idx+1
} ## end gamREGS
cdf
iq
idx
subset(parest, variable == parms[v])
subset(parest, variable == parms[v] & source == 'Estimated'  | variable == parms[v] & source == 'Actual' & REG == cdf[idx,'REG'])
tmp <- subset(parest, variable == parms[v] & source == 'Estimated'  | variable == parms[v] & source == 'Actual' & REG == cdf[idx,'REG'])
bounds <- tmp %>% filter(source == 'Estimated' & REG == gamREGS[iq]) %>% select(lwr,upr)
# cdf[idx,'k'] <- ptf[1];  cdf[idx,'Linf'] <- ptf[2]
ptf[v] <- tmp$value[tmp$source == 'Actual' &  tmp$REG ==    cdf[idx,'REG']] >= bounds[1] &
tmp$value[tmp$source == 'Actual'&  tmp$REG ==    cdf[idx,'REG']] <= bounds[2]
tmp <- subset(parest, variable == parms[v] & source == 'Estimated'  | variable == parms[v] & source == 'Actual' & REG == cdf[idx,'REG'])
tmp
bounds
bounds <- tmp %>% filter(source == 'Estimated' & REG ==  cdf[idx,'gamREG'] ) %>% select(lwr,upr)
bounds
# cdf[idx,'k'] <- ptf[1];  cdf[idx,'Linf'] <- ptf[2]
ptf[v] <- tmp$value[tmp$source == 'Actual' &  tmp$REG ==    cdf[idx,'REG']] >= bounds[1] &
tmp$value[tmp$source == 'Actual'&  tmp$REG ==    cdf[idx,'REG']] <= bounds[2]
ptf
cdf[idx,'k'] <- ptf[1];  cdf[idx,'Linf'] <- ptf[2]
cdf
for(v in  1:length(parms)){ ## loop variables
tmp <- subset(parest, variable == parms[v] & source == 'Estimated'  | variable == parms[v] & source == 'Actual' & REG == cdf[idx,'REG'])
bounds <- tmp %>% filter(source == 'Estimated' & REG ==  cdf[idx,'gamREG'] ) %>% select(lwr,upr)
# cdf[idx,'k'] <- ptf[1];  cdf[idx,'Linf'] <- ptf[2]
ptf[v] <- tmp$value[tmp$source == 'Actual' &  tmp$REG ==    cdf[idx,'REG']] >= bounds[1] &
tmp$value[tmp$source == 'Actual'&  tmp$REG ==    cdf[idx,'REG']] <= bounds[2]
} ## end vars
cdf
v
tmp <- subset(parest, variable == parms[v] & source == 'Estimated'  | variable == parms[v] & source == 'Actual' & REG == cdf[idx,'REG'])
tmp
bounds
tmp$value[tmp$source == 'Actual' &  tmp$REG ==    cdf[idx,'REG']] >= bounds[1] &
tmp$value[tmp$source == 'Actual'&  tmp$REG ==    cdf[idx,'REG']] <= bounds[2]
# cdf[idx,'k'] <- ptf[1];  cdf[idx,'Linf'] <- ptf[2]
ptf[v] <- tmp$value[tmp$source == 'Actual' &  tmp$REG ==    cdf[idx,'REG']] >= bounds[1] &
tmp$value[tmp$source == 'Actual'&  tmp$REG ==    cdf[idx,'REG']] <= bounds[2]
ptf
cdf[idx,'k'] <- ptf[1];  cdf[idx,'Linf'] <- ptf[2]
cdf
parest
for(b in 1:nboot){
## get specific scenario and re-aggregate
scen <- unique(ldfprop$scen)[l]
tempdf <- read.csv(paste0("./IBM_output/datasets/",scen,"_",b,".csv")) #%>% filter(Age == 6)
if(scen == 'NoBreaks') tempdf$REG <- as.factor('R1')
breaksdf <- read.csv( paste0("./GAM_output/ldf_raw_a",age,".csv")) %>% filter(scen ==  unique(ldfprop$scen)[l] & boot == b)
dat<-getGR(tempdf,breaksdf);rm(tempdf)
## now re-aggregate the data ----
## generate DES matrix of vectors and a KEY for later comparison
DES <- KEY <-  matrix(NA, ncol = 1, nrow = nrow(dat))
DES <- ifelse(!is.na(dat$gamREG), as.numeric(factor(dat$gamREG)),1)-1 ## overwrite NA for nobreaks
KEY <- paste(scen,DES,sep = "_")
keybase <- unique(ifelse(!is.na(dat$gamREG), as.character(dat$gamREG),"R1")) ## text regions
## run TMB parest----
dat0 <- rep0 <- NULL ## later storage
nStrata <- length(unique(DES))
data <-
list(
Length_cm = dat[,"Length_cm"],
Age = dat[,"Age"],
DES = as.vector(DES),
nStrata = nStrata
)
parameters <-
list(
log_Linf = rep(log(200), nStrata),
log_k = rep(log(0.3), nStrata),
t0 = rep(0.1, nStrata),
log_Sigma = 0
)
# Now estimate everything -- DO PHASES
map <- NULL
# map <- list(log_Linf = factor(NA)) ## get K, other stuff shouldn't change much
model <- MakeADFun(data, parameters,  DLL="sptlvb",silent=T,map=map)
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 10000
)
)
best <- model$env$last.par.best
rep <- sdreport(model)
dat0 <- c(dat0, model$report()$ypreds %>% data.frame())
rep0 <- bind_rows(rep0,
bind_cols(
data.frame(names(rep$value)),
data.frame(rep$value),
data.frame(rep$sd),
data.frame(c(rep(keybase
, 3), rep("ALL", 1)))
))
names(rep0) <- c('variable', 'value','sd', 'REG')
rep0$value[rep0$variable %in% c('log_k','log_Linf')] <- exp(rep0$value[rep0$variable %in% c('log_k','log_Linf')])
rep0$sd[rep0$variable %in% c('log_k','log_Linf')] <- exp(rep0$sd[rep0$variable %in% c('log_k','log_Linf')])
rep0$variable <- factor(rep0$variable, levels = c("k","Linf","Sigma","t0","log_k","log_Linf")) ## enable new levels
rep0$variable[rep0$variable == 'log_k'] <- 'k'
rep0$variable[rep0$variable == 'log_Linf'] <- 'Linf'
## reformat outputs ----
write.csv(rep0, file = paste0("./output_data/",scen,"_parEst_gam_",b,"_",Sys.Date(),'.csv'),row.names = F)
ypreds0 <- cbind(dat0,dat) %>% data.frame()
names(ypreds0)[1] <- c('Predicted')
write.csv(ypreds0,  paste0("./output_data/",scen,"_predicts_",b,Sys.Date(),".csv"),row.names = F)
ypreds <-  read.csv(paste0("./output_data/",scen,"_predicts_",b,Sys.Date(),".csv"))
cat("Fit TMB model ",paste(scen)," boot ",b," & saved outputs \n")
## check and save coverage --
## plot estimates
gamREGS <- factor(unique(dat$gamREG), levels=c("R1", "R2","R3","R4"))
REGS <-  factor(unique(dat$REG), levels=c("R1", "R2","R3","R4")) ## what was used to GENERATE
parest <-  read.csv(paste0("./output_data/",scen,"_parEst_gam_",b,"_",Sys.Date(),'.csv')) %>%
filter(variable != "Sigma" & variable != 't0') %>% mutate(source = 'Estimated')
parest <- rbind(parest, (read.csv("./input_data/true_ibm_vals.csv") %>% filter(REG %in% REGS)))    ## only extract regions from 'actual' that were present in original
parest$REG <- factor(parest$REG, levels=c("R1", "R2","R3","R4"))
parest$lwr <- parest$value - 1.96*parest$sd
parest$upr <- parest$value + 1.96*parest$sd
parms <- c('k','Linf')
for(iq in 1:length(unique(parest$REG))){ ## loop regions
cdf[idx,'scen'] <- scen
cdf[idx,'boot'] <- b
cdf[idx,'gamREG'] <- if(!is.na(gamREGS[iq])){gamREGS[iq]}else{last(gamREGS)}
cdf[idx,'REG'] <- if(!is.na(REGS[iq])){REGS[iq]}else{last(REGS)}
ptf <- NULL
for(v in  1:length(parms)){ ## loop variables
tmp <- subset(parest, variable == parms[v] & source == 'Estimated'  | variable == parms[v] & source == 'Actual' & REG == cdf[idx,'REG'])
bounds <- tmp %>% filter(source == 'Estimated' & REG ==  cdf[idx,'gamREG'] ) %>% select(lwr,upr)
# cdf[idx,'k'] <- ptf[1];  cdf[idx,'Linf'] <- ptf[2]
ptf[v] <- tmp$value[tmp$source == 'Actual' &  tmp$REG ==    cdf[idx,'REG']] >= bounds[1] &
tmp$value[tmp$source == 'Actual'&  tmp$REG ==    cdf[idx,'REG']] <= bounds[2]
} ## end vars
cdf[idx,'k'] <- ptf[1];  cdf[idx,'Linf'] <- ptf[2]
idx <- idx+1
} ## end gamREGS
idx <- idx+1
} ## end boots
cdf
cdf <- cdf %>% filter(!is.na(scen))
## When did regional designation go right? (original analysis)
cdfaccu <- cdf %>% group_by(scen) %>% summarise(sum(gamREG == REG)/n())
cdfaccu
cdf <- data.frame();idx <-1 ## storage coverage prob totals, rbind each scen
for(l in 1:length(unique(ldfprop$scen))){
for(b in 1:nboot){
## get specific scenario and re-aggregate
scen <- unique(ldfprop$scen)[l]
tempdf <- read.csv(paste0("./IBM_output/datasets/",scen,"_",b,".csv")) #%>% filter(Age == 6)
if(scen == 'NoBreaks') tempdf$REG <- as.factor('R1')
breaksdf <- read.csv( paste0("./GAM_output/ldf_raw_a",age,".csv")) %>% filter(scen ==  unique(ldfprop$scen)[l] & boot == b)
dat<-getGR(tempdf,breaksdf);rm(tempdf)
## now re-aggregate the data ----
## generate DES matrix of vectors and a KEY for later comparison
DES <- KEY <-  matrix(NA, ncol = 1, nrow = nrow(dat))
DES <- ifelse(!is.na(dat$gamREG), as.numeric(factor(dat$gamREG)),1)-1 ## overwrite NA for nobreaks
KEY <- paste(scen,DES,sep = "_")
keybase <- unique(ifelse(!is.na(dat$gamREG), as.character(dat$gamREG),"R1")) ## text regions
## run TMB parest----
dat0 <- rep0 <- NULL ## later storage
nStrata <- length(unique(DES))
data <-
list(
Length_cm = dat[,"Length_cm"],
Age = dat[,"Age"],
DES = as.vector(DES),
nStrata = nStrata
)
parameters <-
list(
log_Linf = rep(log(200), nStrata),
log_k = rep(log(0.3), nStrata),
t0 = rep(0.1, nStrata),
log_Sigma = 0
)
# Now estimate everything -- DO PHASES
map <- NULL
# map <- list(log_Linf = factor(NA)) ## get K, other stuff shouldn't change much
model <- MakeADFun(data, parameters,  DLL="sptlvb",silent=T,map=map)
fit <- nlminb(
model$par,
model$fn,
model$gr,
control = list(
rel.tol = 1e-12,
eval.max = 100000,
iter.max = 10000
)
)
best <- model$env$last.par.best
rep <- sdreport(model)
dat0 <- c(dat0, model$report()$ypreds %>% data.frame())
rep0 <- bind_rows(rep0,
bind_cols(
data.frame(names(rep$value)),
data.frame(rep$value),
data.frame(rep$sd),
data.frame(c(rep(keybase
, 3), rep("ALL", 1)))
))
names(rep0) <- c('variable', 'value','sd', 'REG')
rep0$value[rep0$variable %in% c('log_k','log_Linf')] <- exp(rep0$value[rep0$variable %in% c('log_k','log_Linf')])
rep0$sd[rep0$variable %in% c('log_k','log_Linf')] <- exp(rep0$sd[rep0$variable %in% c('log_k','log_Linf')])
rep0$variable <- factor(rep0$variable, levels = c("k","Linf","Sigma","t0","log_k","log_Linf")) ## enable new levels
rep0$variable[rep0$variable == 'log_k'] <- 'k'
rep0$variable[rep0$variable == 'log_Linf'] <- 'Linf'
## reformat outputs ----
write.csv(rep0, file = paste0("./output_data/",scen,"_parEst_gam_",b,"_",Sys.Date(),'.csv'),row.names = F)
ypreds0 <- cbind(dat0,dat) %>% data.frame()
names(ypreds0)[1] <- c('Predicted')
write.csv(ypreds0,  paste0("./output_data/",scen,"_predicts_",b,Sys.Date(),".csv"),row.names = F)
ypreds <-  read.csv(paste0("./output_data/",scen,"_predicts_",b,Sys.Date(),".csv"))
cat("Fit TMB model ",paste(scen)," boot ",b," & saved outputs \n")
## check and save coverage --
## plot estimates
gamREGS <- factor(unique(dat$gamREG), levels=c("R1", "R2","R3","R4"))
REGS <-  factor(unique(dat$REG), levels=c("R1", "R2","R3","R4")) ## what was used to GENERATE
parest <-  read.csv(paste0("./output_data/",scen,"_parEst_gam_",b,"_",Sys.Date(),'.csv')) %>%
filter(variable != "Sigma" & variable != 't0') %>% mutate(source = 'Estimated')
parest <- rbind(parest, (read.csv("./input_data/true_ibm_vals.csv") %>% filter(REG %in% REGS)))    ## only extract regions from 'actual' that were present in original
parest$REG <- factor(parest$REG, levels=c("R1", "R2","R3","R4"))
parest$lwr <- parest$value - 1.96*parest$sd
parest$upr <- parest$value + 1.96*parest$sd
parms <- c('k','Linf')
for(iq in 1:length(unique(parest$REG))){ ## loop regions
cdf[idx,'scen'] <- scen
cdf[idx,'boot'] <- b
cdf[idx,'gamREG'] <- if(!is.na(gamREGS[iq])){gamREGS[iq]}else{last(gamREGS)}
cdf[idx,'REG'] <- if(!is.na(REGS[iq])){REGS[iq]}else{last(REGS)}
ptf <- NULL
for(v in  1:length(parms)){ ## loop variables
tmp <- subset(parest, variable == parms[v] & source == 'Estimated'  | variable == parms[v] & source == 'Actual' & REG == cdf[idx,'REG'])
bounds <- tmp %>% filter(source == 'Estimated' & REG ==  cdf[idx,'gamREG'] ) %>% select(lwr,upr)
# cdf[idx,'k'] <- ptf[1];  cdf[idx,'Linf'] <- ptf[2]
ptf[v] <- tmp$value[tmp$source == 'Actual' &  tmp$REG ==    cdf[idx,'REG']] >= bounds[1] &
tmp$value[tmp$source == 'Actual'&  tmp$REG ==    cdf[idx,'REG']] <= bounds[2]
} ## end vars
cdf[idx,'k'] <- ptf[1];  cdf[idx,'Linf'] <- ptf[2]
idx <- idx+1
} ## end gamREGS
idx <- idx+1
} ## end boots
} ## end ldfrows
cdf <- cdf %>% filter(!is.na(scen))
## When did regional designation go right? (original analysis)
cdfaccu <- cdf %>% group_by(scen) %>% summarise(sum(gamREG == REG)/n())
## Get coverage probs -- for all params. Note N varies because of varying # regions per boot. Will tabulate for k and linf indiscriminately, which is bad.
cdfprop <- cdf %>% filter(!is.na(scen))  %>%
melt(id = c('scen','boot','gamREG','REG')) %>%
group_by(scen) %>% dplyr::summarise(n = sum(value)) %>%
mutate(prop = n/nrow(.))
cdfprop
write.csv(cdfprop,file = './gam_output/cdf_prop.csv',row.names = F)
write.csv(cdfprop,file = './gam_output/cdf_prop.csv',row.names = F)
write.csv(cdfaccu,file = './gam_output/cdf_accu.csv',row.names = F)
cdf %>% write.csv(.,file = './gam_output/cdf.csv',row.names = F)
ggplot(cdfprop, aes(x = scen, y = prop, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank()) +
scale_fill_grey()+
labs(x = '',y = 'Coverage Probability', fill = 'Spatial Scenario') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
cdfprop <- read.csv('./gam_output/cdf_prop.csv')
levels(cdfprop$scen) <-c("Break at 25 deg.", "Break at 49 deg.",
"Low Contrast at 25 deg.",
"Overlap 20-25 deg.","No Breaks")
cdfprop$scen  <- factor(cdfprop$scen , levels = cdfprop$scen [order(cdfprop$prop )])
ggplot(cdfprop, aes(x = scen, y = prop, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank()) +
scale_fill_grey()+
labs(x = '',y = 'Coverage Probability', fill = 'Spatial Scenario') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
cdf
cdfprop
cdf accu
cdfaccu
head(cdf)
## When did regional designation go right? (original analysis)
cdfaccu <- cdf %>% group_by(scen) %>% summarise(propa = sum(gamREG == REG)/n())
write.csv(cdfaccu,file = './gam_output/cdf_accu.csv',row.names = F)
cdfaccu <- read.csv('./gam_output/cdf_accu.csv')
levels(cdfaccu$scen) <-c("Break at 25 deg.", "Break at 49 deg.",
"Low Contrast at 25 deg.",
"Overlap 20-25 deg.","No Breaks")
cdfaccu$scen  <- factor(cdfaccu$scen , levels = cdfaccu$scen [order(cdfaccu$propa )])
ggplot(cdfaccu, aes(x = scen, y = propa, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank()) +
scale_fill_grey()+
labs(x = '',y = 'Coverage Probability', fill = 'Spatial Scenario') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
lay <- c(1,2)
plist1[[1]] <- ggplot(cdfprop, aes(x = scen, y = prop, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank()) +
scale_fill_grey()+
labs(x = '',y = 'Coverage Probability', fill = 'Spatial Scenario') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
# ggsave(plot = last_plot(),  file = paste0("./figures/cdfprop.png"), width = 9, height = 6, units = 'in', dpi = 480)
cdfaccu <- read.csv('./gam_output/cdf_accu.csv')
levels(cdfaccu$scen) <-c("Break at 25 deg.", "Break at 49 deg.",
"Low Contrast at 25 deg.",
"Overlap 20-25 deg.","No Breaks")
cdfaccu$scen  <- factor(cdfaccu$scen , levels = cdfaccu$scen [order(cdfaccu$propa )])
plist1[[2]] <- ggplot(cdfaccu, aes(x = scen, y = propa, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank()) +
scale_fill_grey()+
labs(x = '',y = 'Proportion Detected Accurate Breaks', fill = 'Spatial Scenario') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
# ggsave(plot = last_plot(),  file = paste0("./figures/cdfaccu.png"), width = 9, height = 6, units = 'in', dpi = 480)
plist1 <- list()
plist1[[1]] <- ggplot(cdfprop, aes(x = scen, y = prop, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank()) +
scale_fill_grey()+
labs(x = '',y = 'Coverage Probability', fill = 'Spatial Scenario') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
plist1[[2]] <- ggplot(cdfaccu, aes(x = scen, y = propa, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank()) +
scale_fill_grey()+
labs(x = '',y = 'Proportion Detected Accurate Breaks', fill = 'Spatial Scenario') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
lay <- c(1,2)
grid.arrange(grobs = plist1, layout_matrix = lay)
plist1
lay <- cbind(1,2)
grid.arrange(grobs = plist1, layout_matrix = lay)
plist1[[1]] <- ggplot(cdfprop, aes(x = scen, y = prop, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = 'none') +
scale_fill_grey()+
labs(x = '',y = 'Coverage Probability', fill = 'Spatial Scenario') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
grid.arrange(grobs = plist1, layout_matrix = lay)
plist1[[1]] <- ggplot(cdfprop, aes(x = scen, y = prop, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = 'topleft') +
scale_fill_grey()+
labs(x = '',y = 'Coverage Probability', fill = 'Spatial Scenario') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
plist1[[2]] <- ggplot(cdfaccu, aes(x = scen, y = propa, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = 'none') +
scale_fill_grey()+
labs(x = '',y = 'Proportion Detected Accurate Breaks', fill = 'Spatial Scenario') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
grid.arrange(grobs = plist1, layout_matrix = lay)
?legend.position
?theme
plist1[[1]] <- ggplot(cdfprop, aes(x = scen, y = prop, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = c(0.1,0.9)) +
scale_fill_grey()+
labs(x = '',y = 'Coverage Probability', fill = 'Spatial Scenario') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
grid.arrange(grobs = plist1, layout_matrix = lay)
plist1[[1]] <- ggplot(cdfprop, aes(x = scen, y = prop, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = c(0.2,0.9)) +
scale_fill_grey()+
labs(x = '',y = 'Coverage Probability', fill = 'Spatial Scenario') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
grid.arrange(grobs = plist1, layout_matrix = lay)
plist1 <- list()
plist1[[1]] <- ggplot(cdfprop, aes(x = scen, y = prop, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = c(0.2,0.9)) +
scale_fill_grey()+
labs(x = '',y = 'Coverage Probability', fill = 'Spatial Scenario', title = 'Coverage Probability') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
# ggsave(plot = last_plot(),  file = paste0("./figures/cdfprop.png"), width = 9, height = 6, units = 'in', dpi = 480)
cdfaccu <- read.csv('./gam_output/cdf_accu.csv')
levels(cdfaccu$scen) <-c("Break at 25 deg.", "Break at 49 deg.",
"Low Contrast at 25 deg.",
"Overlap 20-25 deg.","No Breaks")
# cdfaccu$scen  <- factor(cdfaccu$scen , levels = cdfaccu$scen [order(cdfaccu$propa )])
plist1[[2]] <- ggplot(cdfaccu, aes(x = scen, y = propa, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = 'none') +
scale_fill_grey()+
labs(x = '',y = 'Proportion Detected Accurate Breaks', fill = 'Spatial Scenario', title = 'Proportion Detected Accurate Breaks') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
# ggsave(plot = last_plot(),  file = paste0("./figures/cdfaccu.png"), width = 9, height = 6, units = 'in', dpi = 480)
grid.arrange(grobs = plist1, layout_matrix = lay)
cdfprop <- read.csv('./gam_output/cdf_prop.csv')
levels(cdfprop$scen) <-c("Break at 25 deg.", "Break at 49 deg.",
"Low Contrast at 25 deg.",
"Overlap 20-25 deg.","No Breaks")
# cdfprop$scen  <- factor(cdfprop$scen , levels = cdfprop$scen [order(cdfprop$prop )])
plist1 <- list()
plist1[[1]] <- ggplot(cdfprop, aes(x = scen, y = prop, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = c(0.2,0.9)) +
scale_fill_grey()+
labs(x = '',y = 'Coverage Probability', fill = 'Spatial Scenario', title = 'Coverage Probability') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
# ggsave(plot = last_plot(),  file = paste0("./figures/cdfprop.png"), width = 9, height = 6, units = 'in', dpi = 480)
cdfaccu <- read.csv('./gam_output/cdf_accu.csv')
levels(cdfaccu$scen) <-c("Break at 25 deg.", "Break at 49 deg.",
"Low Contrast at 25 deg.",
"Overlap 20-25 deg.","No Breaks")
# cdfaccu$scen  <- factor(cdfaccu$scen , levels = cdfaccu$scen [order(cdfaccu$propa )])
plist1[[2]] <- ggplot(cdfaccu, aes(x = scen, y = propa, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = 'none') +
scale_fill_grey()+
labs(x = '',y = 'Proportion Detected Accurate Breaks', fill = 'Spatial Scenario', title = 'Proportion Detected Accurate Breaks') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
# ggsave(plot = last_plot(),  file = paste0("./figures/cdfaccu.png"), width = 9, height = 6, units = 'in', dpi = 480)
lay <- cbind(1,2)
grid.arrange(grobs = plist1, layout_matrix = lay)
plist1[[1]] <- ggplot(cdfprop, aes(x = scen, y = prop, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = 'none') +
scale_fill_grey()+
labs(x = '',y = 'Coverage Probability', fill = 'Spatial Scenario', title = 'Coverage Probability') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
# cdfaccu$scen  <- factor(cdfaccu$scen , levels = cdfaccu$scen [order(cdfaccu$propa )])
plist1[[2]] <- ggplot(cdfaccu, aes(x = scen, y = propa, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = c(0.2,0.9)) +
scale_fill_grey()+
labs(x = '',y = 'Proportion Detected Accurate Breaks', fill = 'Spatial Scenario', title = 'Proportion Detected Accurate Breaks') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
grid.arrange(grobs = plist1, layout_matrix = lay)
plist1[[1]] <- ggplot(cdfprop, aes(x = scen, y = prop, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = c(0.2,0.9)) +
scale_fill_grey()+
labs(x = '',y = 'Coverage Probability', fill = 'Spatial Scenario', title = 'Coverage Probability') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
plist1[[2]] <- ggplot(cdfaccu, aes(x = scen, y = propa, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = c(0.2,0.9)) +
scale_fill_grey()+
labs(x = '',y = 'Proportion Detected Accurate Breaks', fill = 'Spatial Scenario', title = 'Proportion Detected Accurate Breaks') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
grid.arrange(grobs = plist1, layout_matrix = lay)
cdfprop <- read.csv('./gam_output/cdf_prop.csv')
levels(cdfprop$scen) <-c("Break at 25 deg.", "Break at 49 deg.",
"Low Contrast at 25 deg.",
"Overlap 20-25 deg.","No Breaks")
cdfprop$scen  <- factor(cdfprop$scen , levels = cdfprop$scen [order(cdfprop$prop )])
plist1 <- list()
plist1[[1]] <- ggplot(cdfprop, aes(x = scen, y = prop, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = c(0.2,0.9)) +
scale_fill_grey()+
labs(x = '',y = 'Coverage Probability', fill = 'Spatial Scenario', title = 'Coverage Probability') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
# ggsave(plot = last_plot(),  file = paste0("./figures/cdfprop.png"), width = 9, height = 6, units = 'in', dpi = 480)
cdfaccu <- read.csv('./gam_output/cdf_accu.csv')
levels(cdfaccu$scen) <-c("Break at 25 deg.", "Break at 49 deg.",
"Low Contrast at 25 deg.",
"Overlap 20-25 deg.","No Breaks")
cdfaccu$scen  <- factor(cdfaccu$scen , levels = cdfaccu$scen [order(cdfaccu$propa )])
plist1[[2]] <- ggplot(cdfaccu, aes(x = scen, y = propa, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = c(0.2,0.9)) +
scale_fill_grey()+
labs(x = '',y = 'Proportion Detected Accurate Breaks', fill = 'Spatial Scenario', title = 'Proportion Detected Accurate Breaks') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
# ggsave(plot = last_plot(),  file = paste0("./figures/cdfaccu.png"), width = 9, height = 6, units = 'in', dpi = 480)
lay <- cbind(1,2)
grid.arrange(grobs = plist1, layout_matrix = lay)
grid.arrange(grobs = plist1, layout_matrix = lay) %>%
ggsave(plot = .,  file = paste0("./figures/cdfprob.png"), width = 11, height = 8, units = 'in', dpi = 480)
plist1[[1]] <- ggplot(cdfprop, aes(x = scen, y = prop, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = c(0.2,0.9)) +
scale_fill_grey()+
labs(x = '',y = 'Coverage Probability', fill = 'Spatial Scenario', title = 'a) Coverage Probability') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
plist1[[2]] <- ggplot(cdfaccu, aes(x = scen, y = propa, fill = scen)) +
theme_minimal() +
theme(panel.grid = element_blank(), legend.position = c(0.2,0.9)) +
scale_fill_grey()+
labs(x = '',y = 'Proportion Detected Accurate Breaks', fill = 'Spatial Scenario', title = 'b) Proportion Detected Accurate Breaks') +
geom_bar(stat = 'identity',width=0.6, position = position_dodge(width=0.5))
grid.arrange(grobs = plist1, layout_matrix = lay) %>%
ggsave(plot = .,  file = paste0("./figures/cdfprob.png"), width = 11, height = 8, units = 'in', dpi = 480)
