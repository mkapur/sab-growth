
Build_EM_Fn <- function(RootFile, Species = Species, parmgrid, RepI = RepI, RepE = RepE){
  ## define where corresponding OM sits
  DateFile <- paste0(SpeciesOM, Sys.Date())
  OMRep <- paste0(DateFile,"/Rep",RepI,"/")
  SpeciesEM <- paste0(RootFile,Species,"_EM/",Sys.Date(),"/Rep",RepI,"/")
  if(!exists(SpeciesEM)) dir.create(SpeciesEM, recursive = T)
  
  EMRep <-  paste0(SpeciesEM, paste0(parmgrid[1:RepE,'idx'], collapse = ""),"/")
  if(!exists(EMRep)) dir.create(EMRep)
  
  # copy control & other files from OM rep into this EM rep
  file.copy(
    from = paste0(
      OMRep,
      list.files(OMRep,
                 pattern = "starter|par|forecast|Forecast|data|control|.exe")
    ),
    to = EMRep,
    overwrite = TRUE
  )
  
  
  ## ALL SIMS: Modify EM starter file
  Starter = SS_readstarter( file=paste0(EMRep,"starter.ss"), verbose = F)
  Starter[['init_values_src']] = 0 ## don't read from par - need to work with CTL
  Starter[['N_bootstraps']] = 0 ## fit with NO obs error (don't need this twice)
  SS_writestarter( mylist=Starter, dir = EMRep, overwrite=TRUE, verbose = F, warn = F)
  
  
  # spec <- file(paste0(EMRep,"specs.txt")) ## storage for what changed
  sink(paste0(EMRep,"specs.txt"))


  ## MISSPECS ----
  cat(c("**MIS-SPECIFICATIONS** \n"))
  
  ## read in control file
  # Lines <- readLines(paste0(EMRep, Species,"_control.ss"))
  EM_ctl <- readLines(paste0(EMRep, Species,"_control.ss")) ## read in control file
  
  ## A long term length-at-age ----
  cf <- sample(c(0,1), replace=TRUE, size=1)  ## coinflip hi or low 5%
  wrongdf <- matrix(c(7e-5,1e-5,56.00,
                      43.28,0.25,0.30,56.00,
                      43.28,0.25,0.30),ncol = 5) ## a0 linf, k (repeat last two twice)
  LOI <- grep(paste(c("# Linf","# A0","# VBK"),collapse = "|"),EM_ctl)
  NewLine <- strsplit(EM_ctl[LOI], "    ") ## grab all lines that match EMs; stupid separation -_-
  if(cf == 0){
    cat(c("A deflated long term length-at age by 5% \n"))
    for(a in 1:length(NewLine)){
      NewLine[[a]][3] = wrongdf[1,a] ## low vals
      EM_ctl[LOI][a] = paste0(NewLine[[a]], collapse = " ")
    }
    } else if(cf == 1) {
      cat(c("A inflated long term length-at age by 5% \n"))
      for(a in 1:length(NewLine)){
        NewLine[[a]][3] =  wrongdf[2,a] ## low values
        EM_ctl[LOI][a] = paste0(NewLine[[a]], collapse = " ")
      }
    }
  
  
  ## B two periods of L at age ----
  cf <- sample(c(0,1,2), replace=TRUE, size=1)  ## coinflip early, late, both
  wrongdf <- matrix(c(7e-5,1e-5,58.67,
                      41.00,0.25,0.30,58.67,
                      41.00,0.25,0.30), ncol = 5) ## a0 linf, k
  
  if(cf == 0){ ## early inflate
    cat(c("B inflated early period length-at age by 5% \n"))
    for(a in 1:3){
      NewLine[[a]][3] <-  wrongdf[1,a] 
      EM_ctl[LOI][a] <-  paste0(NewLine[[a]], collapse = " ")
    }
    } else if(cf == 1) { ## late deflate, use cols 2 and 3
      cat(c("B deflated late period length-at age by 5% \n"))
      for(a in 1:2){
        NewLine[[a+3]][3] <-  wrongdf[2,(a+1)] 
        EM_ctl[LOI][a+3] <- paste0(NewLine[[a+3]], collapse = " ")
      }
    } else if(cf == 2) { ## wrong both
      cat(c("B inflated early period & deflated late period length-at age by 5% \n"))
      
      for(a in 1:3){
        NewLine[[a]][3] <- wrongdf[1,a] ## early inflate
        EM_ctl[LOI][a] <- paste0(NewLine[[a]], collapse = " ")
      }
      for(a in 1:2){
        NewLine[[a+3]][3] <-  wrongdf[2,(a+1)] ## late deflate, use cols 2 and 3
        EM_ctl[LOI][a+3] <- paste0(NewLine[[a+3]], collapse = " ")
      }
    }
  
  
  ## C State change in M ----
  cf <- sample(c(0,1), replace=TRUE, size=1)  ## coinflip high or low
  cat(paste0("C",ifelse(cf == 0," deflated "," inflated "), "M at age 0,1,2 for both periods by 10% \n"))
  LOI <- grep("# M age ",EM_ctl) ## both timeblocks, >1996 is is in mgparms
  NewLine <- strsplit(EM_ctl[LOI], "    ")  ## grab all lines that match EMs; stupid separation -_-
  for(i in 1:length(NewLine)){
    NewLine[[i]][3] <-  ifelse(cf == 0, 0.9*as.numeric(NewLine[[i]][3]),
                               1.1*as.numeric(NewLine[[i]][3]))
    EM_ctl[LOI][i] <- paste0(NewLine[[i]], collapse = "    ")
    
  }
  # 
  ## D temporal variability in M ----
  cf <- sample(c(0,1,2), replace=TRUE, size=1)  ## coinflip switch, high or low
  mvals <- read.csv(paste0(RootFile,"mvals.csv"))
  LOI <- grep("# M age ",EM_ctl) ## both timeblocks, >1996 is is in mgparms
  NewLine <- strsplit(EM_ctl[LOI], "    ")  ## grab all lines that match EMs; stupid separation -_-

  if(cf == 0) { ## deflate early period
    cat(c("D deflated early period M by 10% \n"))
    for(i in 1:3){
      NewLine[[i]][3] <- mvals[3,i] ## deflated values age 0:2
      EM_ctl[LOI][i] <- paste0(NewLine[[i]], collapse = "    ")
    }
  } else if(cf == 1) { ## inflate late period
    cat(c("D inflated late period M by 10% \n"))
    for(i in 4:6){
      NewLine[[i]][3] <- mvals[4,i] ## inflated values age 0:2
      EM_ctl[LOI][i] <- paste0(NewLine[[i]], collapse = "    ")
    }
  } else { ## swap blocks
    cat(c("D deflated early period & inflated late period M by 10% \n"))
    for(i in 1:3){
      NewLine[[i]][3] <- mvals[4,i] ## inflated values age 0:2
      EM_ctl[LOI][i] <- paste0(NewLine[[i]], collapse = "    ")
    }
    for(i in 4:6){
      NewLine[[i]][3] <- mvals[3,i] ## deflated values age 0:2
      EM_ctl[LOI][i] <- paste0(NewLine[[i]], collapse = "    ")
    }
  }
  
  ## E steepness ----
  cf <- sample(c(0,1), replace=TRUE, size=1)  ## coinflip high or low
  cat(paste0("C",ifelse(cf == 0," deflated "," inflated "), "steepness \n"))
  LOI <-grep("# Steepness with Myers' prior",EM_ctl)
  NewLine <- strsplit(EM_ctl[LOI], "    ") ## grab all lines that match EMs; stupid separation -_-
  NewLine[[1]][3] <-  ifelse(cf == 0, 0.7, 0.9)
  EM_ctl[LOI] <- paste0(NewLine[[1]], collapse = " ")
  
  ## F spatial age patterns ----
  cf <- sample(c(0,1), replace=TRUE, size=1)  ## coinflip high or low
  cat(paste0("C",ifelse(cf == 0," deflated "," inflated "), "2nd movement node \n"))
  LOI <-grep("# example move definition",EM_ctl)+2 ## source-sink line
  NewLine <- strsplit(EM_ctl[LOI], " ") ## grab all EM_ctl that match EMs; stupid separation -_-
  NewLine[[1]][6] <-  ifelse(cf == 0, 1, 4)
  EM_ctl[LOI] <- paste0(NewLine[[1]], collapse = " ")
  
  
  ## G temporal var in spatial age patterns ----
  
  ## H asymptotic length-based selectivity, all pds ----
  LOI <- grep("# SizeSel_1",EM_ctl)[5:6]
  cat(c("H changed both periods to logistic selectivity \n"))
  NewLine <- strsplit(EM_ctl[LOI], " ") 
  for(a in 1:2){ ## mis-spec to logistic
    NewLine[[a]][1:3] <-  paste0(c(-5,30,24))
    EM_ctl[LOI][a] <- paste0(NewLine[[a]], collapse = " ")
  }
  
  
  ## I temporal variability in gear selectivity, one block ----
  cf <- sample(c(0,1), replace=TRUE, size=1)  ## coinflip high or low
  cat(paste0("C",ifelse(cf == 0," first time pd "," second time pd "), "logistic sel \n"))
  # if(cf == 0){
  #   LOI <-grep("# SizeSel_1P",EM_ctl)
  #   NewLine <- strsplit(EM_ctl[LOI][5:6], " ") 
  #   
  #   for(a in 1:2){ ## mis-spec to logistic, period 1
  #     NewLine[[a]][1:3] <-  paste0(c(-5,30,24))
  #     EM_ctl[LOI][a+4] <- paste0(NewLine[[a]], collapse = "    ")
  #   }
  # }else if(cf ==1){
  #   LOI <-grep("# SizeSel_2P",EM_ctl)
  #   NewLine <- strsplit(EM_ctl[LOI][5:6], " ") 
  #   for(a in 1:2){ ## mis-spec to logistic, period 1
  #     NewLine[[a]][1:3] <-  paste0(c(-5,30,24))
  #     EM_ctl[LOI][a+4] <- paste0(NewLine[[a]], collapse = "    ")
  #   }
  # }
  
  
  ## J modify EM for time varying catchability ----
  cf <- sample(c(0,1), replace=TRUE, size=1)   ## randomly choose time block 1 or 2 to mis-specify
  sDat <- SS_readdat(paste0(EMRep,Species,"_data.ss"))
  if(cf == 0){
    sDat$CPUE[1:31,'obs']   <- round( sDat$CPUE[1:31,'obs']  * runif(length(1:31),0.9,1.1)) ## overwrite with error - correct this to use # and se_log later
    cat(c("J wrong CPUE (q) for early period \n"))
    
    }else {
    sDat$CPUE[32:42,'obs']   <- round( sDat$CPUE[32:42,'obs']  * runif(length(32:42),0.9,1.1))
    cat(c("J wrong CPUE (q) for late period \n"))
  }
  
  ## K Overall Spatial Structure
  
  ## CORRECTIONS ----
  pgtemp <- strsplit(basename(EMRep),"")[[1]] ## corrections to make
  OM_ctl <- readLines(paste0(OMRep, Species,"_control.ss")) ## source for correct vals

  cat(c("\n \n **CORRECTIONS** \n \n"))
  
  ## A Long term length at age
  if("a" %in% pgtemp){  
    # lta <- c(2E-4,0.274,49.27,0.274,49.27) # A0 VBK LINF
    LOI <- grep(paste(c("# Linf","# A0","# VBK"),collapse = "|"),EM_ctl)
    NewLine <- strsplit(EM_ctl[LOI], "    ") ## grab all lines that match EMs; stupid separation -_-
    for(a in 1:5){
      # NewLine[[a]][3] <- lta[a]
      # EM_ctl[LOI][a] <- paste0(NewLine[[a]], collapse = " ")
      EM_ctl[LOI][a] <- OM_ctl[LOI][a]
    }
    # cat(c("A corrected long-term length at age to average OM values \n"))
    cat(c("A corrected long-term length at age to OM values \n"))
  }
  ## B two periods of l at age ----
  if("b" %in% pgtemp){  
    LOI <- grep(paste(c("# Linf","# A0","# VBK"),collapse = "|"),EM_ctl)
    EM_ctl[LOI] <- OM_ctl[LOI] ## overwrite with correct value
    cat(c("B corrected time-blocked length at age to OM values \n"))
  }
  
  ## E steepness ----
  if("e" %in% pgtemp){
    LOI <-grep("# Steepness with Myers' prior",EM_ctl)
    EM_ctl[LOI] <- OM_ctl[LOI] ## overwrite with correct value
    cat(c("E corrected steepness OM init value \n"))
  }
  
  ## H dome shaped sel ----
  if("h" %in% pgtemp){
    LOI <- grep("# SizeSel_1P",EM_ctl)[5:6]
    NewLine <- strsplit(EM_ctl[LOI], " ")
    for(a in 1:2){
      NewLine[[a]][1:3] <-  paste0(c(rep(-999,3))) ## turn off these pars
      EM_ctl[LOI][a] <- paste0(NewLine[[a]], collapse = " ")
    }
    cat(c("H returned both time blocks to dome-shaped selectivity \n"))
  }
  ## J catchability via CPUE ----
  if("j" %in% pgtemp){
    EMsDat <- SS_readdat(paste0(EMRep,Species,"_data.ss"))
    OMsDat <- SS_readdat(paste0(OMRe,Species,"_data.ss"))
    EMsDat$CPUE <- OMsDat$CPUE
    cat(c("J replaced with correct CPUE (q) from OM \n"))
  }
  
  #  
  # if(length(pgtemp == 9)){
  #   ## fix spatial if final
  # }
  
  
  sink()
  SS_writedat(sDat,paste0(EMRep, Species,"_data.ss"),overwrite = T)
  writeLines(text = EM_ctl, con = paste0(EMRep, Species,"_control.ss"))
 
  
   ## run in here
  setwd( EMRep )
  shell( "ss3.exe -nohess")
  
  ## save plots
  # model_1 <- SS_output(EMRep, covar=FALSE,ncols = 500)
  # SS_plots(
  #   model_1,
  #   datplot = TRUE,
  #   pdf = TRUE,
  #   png = FALSE,
  #   uncertainty = FALSE,
  #   pwidth = 9,
  #   pheight = 9,
  #   rows = 2,
  #   cols = 2
  # )
  
} ## end function
